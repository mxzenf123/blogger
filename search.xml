<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[java自动拆装箱问题总结]]></title>
    <url>%2F2019%2F11%2F03%2Fjava%E8%87%AA%E5%8A%A8%E6%8B%86%E8%A3%85%E7%AE%B1%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[java自动拆装箱自jdk1.5以后新增功能。目的是为了解决基础数据类型和对象操作不便利。比如集合List只能操作对象，而无法对基本数据类型进行add，remove等一系列操作。对自动拆装箱学习过程中，产生了一系列疑问，总结如下jdk如何实现自动拆装箱自动拆装箱优点和缺点自动拆装箱什么时候不自动进行]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java自动拆装箱</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Integer的缓存机制]]></title>
    <url>%2F2019%2F11%2F02%2FInteger%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E7%BC%93%E5%AD%98%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021public class JavaIntegerCache &#123; public static void main(String... strings) &#123; Integer integer1 = 3; Integer integer2 = 3; if (integer1 == integer2) System.out.println("integer1 == integer2"); else System.out.println("integer1 != integer2"); Integer integer3 = 300; Integer integer4 = 300; if (integer3 == integer4) System.out.println("integer3 == integer4"); else System.out.println("integer3 != integer4"); &#125;&#125;由于Integer是对象，两个对象比较，我们普遍的认为上面的两个结果都是false然而结果却会让你大跌眼镜。上面这段代码真正的输出结果：12integer1 == integer2integer3 != integer4原因就在于java5.0以后对于基本类型自动装箱的在范围-127到128之间会进行自动缓存以提升程序性能]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java自动装箱</tag>
        <tag>java缓存</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mybatis动态sql之组合模式]]></title>
    <url>%2F2019%2F11%2F02%2Fmybatis%E5%8A%A8%E6%80%81sql%E5%AE%9E%E7%8E%B0%E4%B9%8B%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[组合设计模式组合设计模式是一种整体与部分的树形层次关系结构。组合对象中各个对象具有相同的行为模式，这样就能处理简单对象一样处理复杂对象。复杂对象的底层细节将会被屏蔽掉，与客户端解耦，最重要的是和简单对象一样实现了同一个接口mybatis动态sql实现同一个接口1234public interface SqlNode &#123; //共同的行为 boolean apply(DynamicContext context);&#125;复杂对象12345678910111213141516 //混合sqlnode节点，组合不同类型的sqlnode //其他node有：trim,set,where,if,otherwise //choose public class MixedSqlNode implements SqlNode &#123; private final List&lt;SqlNode&gt; contents;public MixedSqlNode(List&lt;SqlNode&gt; contents)&#123; this.contents = contents;&#125;@Overridepublic boolean apply(DynamicContext context)&#123; contents.forEach(node -&gt; node.apply(context)); return true;&#125; &#125;简单对象1234567891011121314151617181920212223//if sqlnode实现了接口sqlnode的apply方法，//定义了自己的行为只有当test表达式为真的时候//才会将节点内容增加到动态上下文的sql拼接中public class IfSqlNode implements SqlNode &#123; private final ExpressionEvaluator evaluator; private final String test; private final SqlNode contents; public IfSqlNode(SqlNode contents, String test) &#123; this.test = test; this.contents = contents; this.evaluator = new ExpressionEvaluator(); &#125; @Override public boolean apply(DynamicContext context) &#123; if (evaluator.evaluateBoolean(test, context.getBindings())) &#123; contents.apply(context); return true; &#125; return false; &#125;&#125;mybatis一组复杂sql在xml文件中的配置12345678910111213141516171819202122232425&lt;!-- trim节点作为根节点，下面有三个if子节点，在Mybatis中组织成 一个根节点MixedNode节点下两个trim节点和where节点;trim节点 下一个MixedNode节点，由三个if节点组成;where节点实际上的trim 节点的另一种实现，原理一样 --&gt;&lt;update id="update" parameterType="org.format.dynamicproxy.mybatis.bean.User"&gt; UPDATE users &lt;trim prefix="SET" prefixOverrides=","&gt; &lt;if test="name != null and name != ''"&gt; name = #&#123;name&#125; &lt;/if&gt; &lt;if test="age != null and age != ''"&gt; , age = #&#123;age&#125; &lt;/if&gt; &lt;if test="birthday != null and birthday != ''"&gt; , birthday = #&#123;birthday&#125; &lt;/if&gt; &lt;/trim&gt; &lt;where&gt; 1=1 &lt;if test="id != null"&gt; and id = $&#123;id&#125; &lt;/if&gt; &lt;/where&gt;&lt;/update&gt;总结组合模式对于具有层次关系多个对象能够很好的表达，但是比较抽象不容易掌控。提高了软件设计困难同时屏蔽了对象复杂性，客户端使用变得简单]]></content>
      <categories>
        <category>框架工具</category>
      </categories>
      <tags>
        <tag>mybatis动态sql</tag>
        <tag>组合设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring IoC和容器问题整理]]></title>
    <url>%2F2019%2F10%2F27%2Fspringioc%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[什么是依赖注入以及有什么好处?什么是接口，在java中使用的好处spring bean中为什么推荐使用接口application-context代表什么？你怎么创建一个ApplicationContext实例？描述bean在ApplicationoContext的声明周期最好的关闭ApplicationContext的方式是什么？SpringBoot为我们做了这个吗？能够描述一下下面的问题使用java进行依赖注入使用注解进行依赖注入组件、模块扫描bean的scopebean是懒加载还是预实例化？你怎么控制这种行为？什么是属性源文件？你怎么使用@PropertySource什么是BeanFactoryPostProcessor，有什么用？它什么时候被调用？ProperySourcesPlaceholderConfigurer被用于什么地方？什么是组件扫描？@Autowired注解关于属性、构造器和方法做了什么？如果要向私有属性注入？怎么做到？@Qualifier对@Autowired做了什么补充？什么是对象代理？spring两种创建代理对象的区别？代理对象的限制？代理对象的功能和弊端？@Bean注解有什么用@Bean注解的Bean的默认id是什么？你如果改变？为什么不允许在final类上使用@Configration注解@Configration支持单例bean吗为什么@Bean注解的类的方法也不能是final的什么时候配置profile？在哪些场景会有用@Bean和@Profile能够同时使用吗？@Component和@Profile能够一起使用吗？你能够列举多少种profiles？怎么注入集合和k-v类型的数据到bean中？什么是SpringEL表达式？spring enviroment抽象是什么？$和#有什么区别？]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring IoC</tag>
        <tag>spring容器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[intellij常用快捷键]]></title>
    <url>%2F2019%2F10%2F13%2Fintellij%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[常规Ctrl+X，删除行Ctrl+D，复制行Ctrl+Alt+O，优化导入的类和包Ctrl+Alt+L，格式化代码Ctrl+Shift+F，全局查找，类似Eclipse中的Ctrl+H查找Ctrl+H，显示类结构图（类的继承层次）Ctrl+F12，可以显示当前文件的结构（structure包括属性和方法）Alt+Q，可以看到当前方法的声明Ctrl+Q，显示注释文档Ctrl+P，可以显示参数信息Ctrl+N，可以快速打开类Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）Ctrl+Alt+B，跳转到方法实现处Alt+左箭头，跳转到上次编辑的地方Shift+F6，重命名Alt+Shift+Up/Down，上/下移一行Ctrl+Shift+U，大小写转化调试F8，步过F7，步入Shift+F7，智能步入Shift+F8，步出Alt+Shift+F8，强制步过Alt+Shift+F7，强制步入Alt+F9，运行至光标处Ctrl+Alt+F9，强制运行至光标处F9，恢复程序查找Ctrl+F，查找Ctrl+R，替换Alt+F7，查找用法Ctrl+Alt+F7，显示用法Ctrl+F7，在文件中查找用法r]]></content>
      <categories>
        <category>奇淫技巧</category>
      </categories>
      <tags>
        <tag>intellij快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[apache BeanUtils入门]]></title>
    <url>%2F2019%2F10%2F13%2Fapache_beanutils%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[apache项目地址site背景在我们使用java开发过程中，对于操作类的属性一般通过get或者set两个方法，类似于Object.get()/set()。但是有的时候我们可能不能够直接调用这两个方法获取类的属性，也许第一反应是用reflection，这样会自己写太多和业务无关的代码。apache commons包中BeanUtils能够帮助我们解决这个问题。准备工作引入apache commons-beanutils包新建类Empolyee12345678910111213141516171819202122232425262728293031323334353637383940414243444546public class Employee &#123; public String firstName; public String lastName; public String[] tells; public Map address; public Employee()&#123; tells = new String[10]; address = new HashMap(); &#125; public String getFirstName() &#123; return firstName; &#125; public void setFirstName(String firstName) &#123; this.firstName = firstName; &#125; public String getLastName() &#123; return lastName; &#125; public void setLastName(String lastName) &#123; this.lastName = lastName; &#125; public String[] getTells() &#123; return tells; &#125; public void setTells(String[] tells) &#123; this.tells = tells; &#125; public Map getAddress() &#123; return address; &#125; public void setAddress(Map address) &#123; this.address = address; &#125;&#125;开始使用这篇文章我们主要介绍该工具包中PropertyUtils入门使用简单属性123Employee employee = new Employee();PropertyUtils.setSimpleProperty(employee, "firstName", "欣");PropertyUtils.setSimpleProperty(employee, "lastName", "杨");带索引的属性123Employee employee = new Employee();PropertyUtils.setIndexedProperty(employee, "tells[0]", "110");PropertyUtils.setIndexedProperty(employee, "tells[1]", "120");key-value属性123Employee employee = new Employee();PropertyUtils.setMappedProperty(employee, "address(province)", "四川省");PropertyUtils.setMappedProperty(employee, "address(city)", "成都");]]></content>
      <categories>
        <category>框架工具</category>
      </categories>
      <tags>
        <tag>apache commons</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用hexo搭建个人博客]]></title>
    <url>%2F2019%2F09%2F28%2F%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Quick start参考官网文档快速开始创建博客文件夹1$ hexo new "My New Post"更多: 创建启动本地服务1$ hexo server更多: 服务器生成静态文件1$ hexo generate更多: 生成静态文件发布到远程服务器1$ hexo deploy更多: 发布]]></content>
      <categories>
        <category>奇淫技巧</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
