{"meta":{"title":"我的生活记录","subtitle":"今晚打老虎","description":"对日常生活和学习进行记录","author":"杨欣","url":"http://870314.com","root":"/"},"pages":[{"title":"标签","date":"2019-10-05T05:57:46.000Z","updated":"2019-10-05T06:55:05.558Z","comments":true,"path":"tags/index.html","permalink":"http://870314.com/tags/index.html","excerpt":"","text":""},{"title":"文章分类","date":"2019-10-05T02:49:22.000Z","updated":"2019-10-05T06:57:11.492Z","comments":true,"path":"categories/index.html","permalink":"http://870314.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"spring IoC和容器问题整理","slug":"springioc问题整理","date":"2019-10-27T06:44:07.570Z","updated":"2019-10-27T07:41:12.816Z","comments":true,"path":"2019/10/27/springioc问题整理/","link":"","permalink":"http://870314.com/2019/10/27/springioc问题整理/","excerpt":"","text":"什么是依赖注入以及有什么好处? 什么是接口，在java中使用的好处 spring bean中为什么推荐使用接口 application-context代表什么？ 你怎么创建一个ApplicationContext实例？ 描述bean在ApplicationoContext的声明周期 最好的关闭ApplicationContext的方式是什么？SpringBoot为我们做了这个吗？ 能够描述一下下面的问题 使用java进行依赖注入 使用注解进行依赖注入 组件、模块扫描 bean的scope bean是懒加载还是预实例化？你怎么控制这种行为？ 什么是属性源文件？你怎么使用@PropertySource 什么是BeanFactoryPostProcessor，有什么用？它什么时候被调用？ ProperySourcesPlaceholderConfigurer被用于什么地方？ 什么是组件扫描？ @Autowired注解关于属性、构造器和方法做了什么？ 如果要向私有属性注入？怎么做到？ @Qualifier对@Autowired做了什么补充？ 什么是对象代理？spring两种创建代理对象的区别？ 代理对象的限制？ 代理对象的功能和弊端？ @Bean注解有什么用 @Bean注解的Bean的默认id是什么？你如果改变？ 为什么不允许在final类上使用@Configration注解 @Configration支持单例bean吗 为什么@Bean注解的类的方法也不能是final的 什么时候配置profile？在哪些场景会有用 @Bean和@Profile能够同时使用吗？ @Component和@Profile能够一起使用吗？ 你能够列举多少种profiles？ 怎么注入集合和k-v类型的数据到bean中？ 什么是SpringEL表达式？ spring enviroment抽象是什么？ $和#有什么区别？","categories":[{"name":"spring","slug":"spring","permalink":"http://870314.com/categories/spring/"}],"tags":[{"name":"spring IoC","slug":"spring-IoC","permalink":"http://870314.com/tags/spring-IoC/"},{"name":"spring容器","slug":"spring容器","permalink":"http://870314.com/tags/spring容器/"}]},{"title":"intellij常用快捷键","slug":"intellij常用快捷键","date":"2019-10-13T07:16:49.815Z","updated":"2019-10-13T07:19:52.709Z","comments":true,"path":"2019/10/13/intellij常用快捷键/","link":"","permalink":"http://870314.com/2019/10/13/intellij常用快捷键/","excerpt":"","text":"常规Ctrl+X，删除行 Ctrl+D，复制行 Ctrl+Alt+O，优化导入的类和包 Ctrl+Alt+L，格式化代码 Ctrl+Shift+F，全局查找，类似Eclipse中的Ctrl+H查找 Ctrl+H，显示类结构图（类的继承层次） Ctrl+F12，可以显示当前文件的结构（structure包括属性和方法） Alt+Q，可以看到当前方法的声明 Ctrl+Q，显示注释文档 Ctrl+P，可以显示参数信息 Ctrl+N，可以快速打开类 Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处） Ctrl+Alt+B，跳转到方法实现处 Alt+左箭头，跳转到上次编辑的地方 Shift+F6，重命名 Alt+Shift+Up/Down，上/下移一行 Ctrl+Shift+U，大小写转化 调试F8，步过F7，步入Shift+F7，智能步入Shift+F8，步出Alt+Shift+F8，强制步过Alt+Shift+F7，强制步入Alt+F9，运行至光标处Ctrl+Alt+F9，强制运行至光标处F9，恢复程序 查找Ctrl+F，查找Ctrl+R，替换Alt+F7，查找用法Ctrl+Alt+F7，显示用法Ctrl+F7，在文件中查找用法r","categories":[{"name":"奇淫技巧","slug":"奇淫技巧","permalink":"http://870314.com/categories/奇淫技巧/"}],"tags":[{"name":"intellij快捷键","slug":"intellij快捷键","permalink":"http://870314.com/tags/intellij快捷键/"}]},{"title":"apache BeanUtils入门","slug":"apache_beanutils使用入门","date":"2019-10-13T05:38:23.494Z","updated":"2019-10-13T06:46:39.468Z","comments":true,"path":"2019/10/13/apache_beanutils使用入门/","link":"","permalink":"http://870314.com/2019/10/13/apache_beanutils使用入门/","excerpt":"","text":"apache项目地址site 背景在我们使用java开发过程中，对于操作类的属性一般通过get或者set两个方法，类似于Object.get()/set()。但是有的时候我们可能不能够直接调用这两个方法获取类的属性，也许第一反应是用reflection，这样会自己写太多和业务无关的代码。apache commons包中BeanUtils能够帮助我们解决这个问题。 准备工作引入apache commons-beanutils包新建类Empolyee12345678910111213141516171819202122232425262728293031323334353637383940414243444546public class Employee &#123; public String firstName; public String lastName; public String[] tells; public Map address; public Employee()&#123; tells = new String[10]; address = new HashMap(); &#125; public String getFirstName() &#123; return firstName; &#125; public void setFirstName(String firstName) &#123; this.firstName = firstName; &#125; public String getLastName() &#123; return lastName; &#125; public void setLastName(String lastName) &#123; this.lastName = lastName; &#125; public String[] getTells() &#123; return tells; &#125; public void setTells(String[] tells) &#123; this.tells = tells; &#125; public Map getAddress() &#123; return address; &#125; public void setAddress(Map address) &#123; this.address = address; &#125;&#125; 开始使用这篇文章我们主要介绍该工具包中PropertyUtils入门使用 简单属性123Employee employee = new Employee();PropertyUtils.setSimpleProperty(employee, \"firstName\", \"欣\");PropertyUtils.setSimpleProperty(employee, \"lastName\", \"杨\"); 带索引的属性123Employee employee = new Employee();PropertyUtils.setIndexedProperty(employee, \"tells[0]\", \"110\");PropertyUtils.setIndexedProperty(employee, \"tells[1]\", \"120\"); key-value属性123Employee employee = new Employee();PropertyUtils.setMappedProperty(employee, \"address(province)\", \"四川省\");PropertyUtils.setMappedProperty(employee, \"address(city)\", \"成都\");","categories":[{"name":"框架工具","slug":"框架工具","permalink":"http://870314.com/categories/框架工具/"}],"tags":[{"name":"apache commons","slug":"apache-commons","permalink":"http://870314.com/tags/apache-commons/"},{"name":"java","slug":"java","permalink":"http://870314.com/tags/java/"}]},{"title":"使用hexo搭建个人博客","slug":"搭建hexo博客","date":"2019-09-28T03:23:49.980Z","updated":"2019-10-05T13:26:29.070Z","comments":true,"path":"2019/09/28/搭建hexo博客/","link":"","permalink":"http://870314.com/2019/09/28/搭建hexo博客/","excerpt":"","text":"Quick start参考官网文档 快速开始创建博客文件夹1$ hexo new \"My New Post\" 更多: 创建 启动本地服务1$ hexo server 更多: 服务器 生成静态文件1$ hexo generate 更多: 生成静态文件 发布到远程服务器1$ hexo deploy 更多: 发布","categories":[{"name":"奇淫技巧","slug":"奇淫技巧","permalink":"http://870314.com/categories/奇淫技巧/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://870314.com/tags/hexo/"}]}]}