<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>今晚打老虎</title>
  
  <subtitle>今晚打老虎</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mxzenf123.github.io/index.html/"/>
  <updated>2021-09-12T07:28:39.186Z</updated>
  <id>https://mxzenf123.github.io/index.html/</id>
  
  <author>
    <name>杨欣</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring多数据源实现</title>
    <link href="https://mxzenf123.github.io/index.html/2021/09/12/spring%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%AE%9E%E7%8E%B0/"/>
    <id>https://mxzenf123.github.io/index.html/2021/09/12/spring多数据源实现/</id>
    <published>2021-09-12T06:28:50.227Z</published>
    <updated>2021-09-12T07:28:39.186Z</updated>
    
    <content type="html"><![CDATA[<p>我们系统随着时间推移会逐渐庞大，可能会涉及将数据拆分存储到不同的数据库中去，或者达到读写分离，系统需要访问不同的数据库。</p><p>多数据源方案很多种，比如使用数据库中间件Mycat，将系统微服务化等等。我们这里主要使用spring提供的多数据源支持。</p><p>我遇到的业务场景是这样的，我们有一套管理系统，他涉及很多业务，有三四个同事在维护不同的业务板块。每块业务数据都在一台服务器上，使用不同用户区分不同业务，所以发布的时候默认选定了一块数据源，访问其他业务的加上数据库用户名即可。业务都不是复杂业务，量也不大，这种方式持续了很久，直到我接手后我负责的业务需要迁移数据库，并且我们逐渐在淘汰这种方式访问不同业务数据。</p><p>每块业务代码都通过模块方式隔离，所以我们只要在前端访问controller的时候切换数据源即可。</p><h3 id="spring的AbstractRoutingDataSource源码解读"><a href="#spring的AbstractRoutingDataSource源码解读" class="headerlink" title="spring的AbstractRoutingDataSource源码解读"></a>spring的AbstractRoutingDataSource源码解读</h3><p>我们来看看AbstractRoutingDataSource类图</p><p><img src="/images/2021/AbstractRoutingDataSource.png" alt></p><p>这个类主要有两点：</p><ol><li><p>该类本身就是一个DataSource的抽象类</p></li><li><p>实现了InitializingBean将多个数据源配置通过键值对的形式存储在Map中供自定义的类使用</p></li></ol><p>源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Iterator var1 = <span class="keyword">this</span>.targetDataSources.entrySet().iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(var1.hasNext()) &#123;</span><br><span class="line">    Entry&lt;Object, Object&gt; entry = (Entry)var1.next();</span><br><span class="line">    Object lookupKey = <span class="keyword">this</span>.resolveSpecifiedLookupKey(getKey());</span><br><span class="line">    DataSource dataSource = <span class="keyword">this</span>.resolveSpecifiedData(entry.getValue());</span><br><span class="line">    <span class="keyword">this</span>.resolvedDataSources.put(lookupKey, dataSource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们所要使用的多个DataSource就放在resolvedDataSources里了。再看看获取sql Connection的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.determineTargetDataSource().getConnection();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> DataSource <span class="title">determineTargetDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Assert.notNull(<span class="keyword">this</span>.resolvedDataSources, <span class="string">"DataSource router noinitialized"</span>);</span><br><span class="line">    Object lookupKey = <span class="keyword">this</span>.determineCurrentLookupKey();</span><br><span class="line">    DataSource dataSource = (DataSource)<span class="keyword">this</span>.resolvedDataSources.g(lookupKey);</span><br><span class="line">    <span class="keyword">if</span> (dataSource == <span class="keyword">null</span> &amp;&amp; (<span class="keyword">this</span>.lenientFallback || lookupKey =<span class="keyword">null</span>)) &#123;</span><br><span class="line">        dataSource = <span class="keyword">this</span>.resolvedDefaultDataSource;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (dataSource == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot determine targeDataSource for lookup key ["</span> + lookupKey + <span class="string">"]"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过调用determineCurrentLookupKey抽象方法来get到map中我们配置的多个DataSource中的一个来达到了多个数据源切换的目的</p><h3 id="自定义实现切换数据源"><a href="#自定义实现切换数据源" class="headerlink" title="自定义实现切换数据源"></a>自定义实现切换数据源</h3><p>我们怎么才每个请求到达Controller来决定使用哪个数据源呢？我们将请求所在线程和数据源绑定，这样我们就能够对于不同的请求来使用不同的数据源了。这里要用到ThreadLocal。</p><p>我们先继承AbstractRoutingDataSource实现AbstractRoutingDataSource方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; dataSources = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (String)dataSources.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(String customerType)</span> </span>&#123;</span><br><span class="line">        dataSources.set(customerType);</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dataSources.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中主要对ThreadLocal datasources进行管理，setDataSource对我们要使用的数据源进行key设置；clearDataSource移除ThreadLocal值；determineCurrentLookupKey返回当前线程绑定的数据源key</p><h3 id="拦截controller动态切换数据源"><a href="#拦截controller动态切换数据源" class="headerlink" title="拦截controller动态切换数据源"></a>拦截controller动态切换数据源</h3><p>为了让动态切换数据源代码和业务代码低耦合，我们使用切面和注解的方式来达到目的。自定义注解DtSource来标注controller使用的DataSource</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangxin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DtSource &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> "defaultDataSource"</span>;<span class="comment">//默认数据源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过切面的方式拦截所有controller，在每个请求到达controller时，调用setDataSource设置数据源的key值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangxin</span></span><br><span class="line"><span class="comment"> * add 20210823</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* org.yangxin..*.controller.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeController</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        MethodSignature signature = (MethodSignature)joinPoint.getSignature();</span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line">        DtSource annotation = method.getAnnotation(DtSource.class);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != annotation) &#123;</span><br><span class="line">            DynamicDataSource.setDataSource(annotation.value());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取controller的DtSource注解，如果没有设置DataSource那么采用默认的否则使用自定义的。至此spring多数据源改造完成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们系统随着时间推移会逐渐庞大，可能会涉及将数据拆分存储到不同的数据库中去，或者达到读写分离，系统需要访问不同的数据库。&lt;/p&gt;&lt;p&gt;多数据源方案很多种，比如使用数据库中间件Mycat，将系统微服务化等等。我们这里主要使用spring提供的多数据源支持。&lt;/p&gt;&lt;p&gt;我遇到
      
    
    </summary>
    
    
      <category term="spring" scheme="https://mxzenf123.github.io/index.html/categories/spring/"/>
    
    
      <category term="spring" scheme="https://mxzenf123.github.io/index.html/tags/spring/"/>
    
      <category term="spring 多数据源" scheme="https://mxzenf123.github.io/index.html/tags/spring-%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>jmx技术介绍</title>
    <link href="https://mxzenf123.github.io/index.html/2021/08/29/jmx%E6%8A%80%E6%9C%AF%E4%BB%8B%E7%BB%8D/"/>
    <id>https://mxzenf123.github.io/index.html/2021/08/29/jmx技术介绍/</id>
    <published>2021-08-29T06:31:45.762Z</published>
    <updated>2021-08-29T07:32:35.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p>jmx(Java Management Extension)自j2se5.0被加入的java平台标准。jmx提供了简单，统一的方式来管理监控服务，设备和应用等资源，甚至可以用jmx来管理java VM。</p><p>在语言层面定义了jmx的标准api，结构和设计模式。被管理监控的资源被定义为Managed Beans（简称MBean），MBean被注册到MBean Server，MBean Server充当代理的角色运行在应用中。</p><p>MBean不依赖运行的MBean Server，也就是说只要满足规范，那么你编写的MBean可以运行在任何MBean Server中，就像我们编写的servlet在tomcat或weblogic上都能够运行一样。</p><p>jmx定义了connector规范，远程管理客户端和agent只要满足规范任何协议都能够交互。</p><h3 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h3><p>jmx被划分为三层：</p><ol><li>检测</li><li>jmx代理</li><li>远程管理</li></ol><p><img src="/images/2021/jmx.gif" alt></p><h4 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h4><p>对需要管理检测的资源需要定义一个MBean来描述通过jmx管理的指标，MBean必须实现一个接口，这个接口的方法定义了远程管理能够进行的操作</p><h4 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h4><p>一个代理即一个MBean Server，代理一般运行和应用运行在同一个设备上，这不是必须。代理不需要关注管理的MBean是什么样子以及如何实现，实现了哪些功能。MBean只要按照标准注册到代理上就行</p><h4 id="远程管理"><a href="#远程管理" class="headerlink" title="远程管理"></a>远程管理</h4><p>远程管理主要有两部分组成：connection和adaptor。connector可以实现诸如：rmi，snmp等协议来和代理通信。adaptor提供对监控指标如何显示，比如HTML adaptor可以在浏览器显示管理MBean。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h3&gt;&lt;p&gt;jmx(Java Management Extension)自j2se5.0被加入的java平台标准。jmx提供了简单，统一的方式来管理监控
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://mxzenf123.github.io/index.html/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="jmx" scheme="https://mxzenf123.github.io/index.html/tags/jmx/"/>
    
  </entry>
  
  <entry>
    <title>LockSupport</title>
    <link href="https://mxzenf123.github.io/index.html/2021/08/08/LockSupport/"/>
    <id>https://mxzenf123.github.io/index.html/2021/08/08/LockSupport/</id>
    <published>2021-08-08T08:10:01.304Z</published>
    <updated>2021-08-08T09:21:24.880Z</updated>
    
    <content type="html"><![CDATA[<p>创建锁和其他同步类的基础同步原语。该类使每个线程都关联一个许可(permit)。调用park方法时，如果许可可用那么立即返回否则就阻塞，调用unpark释放许可。</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>我们通过简短的一段代码演示如何使用park来阻塞线程，再调用unpark方法来唤醒线程代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Thread main = Thread.currentThread();</span><br><span class="line"><span class="keyword">new</span> Thread( ()-&gt;&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">   LockSupport.unpark(main);</span><br><span class="line">&#125;).start();</span><br><span class="line">LockSupport.park();</span><br><span class="line">System.out.println(<span class="string">"main结束"</span>);</span><br></pre></td></tr></table></figure><p>在main线程中调用park方法阻塞，启动一个线程sleep1秒钟中后调用unpark方法唤醒main线程控制台输出如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">main结束</span><br></pre></td></tr></table></figure><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/images/2021/LockSupport.png" alt><br>在LockSupport类中全部都是static的方法，意味着我们可以当作工具方法直接调用无须创建该类</p><h3 id="LockSupport特性"><a href="#LockSupport特性" class="headerlink" title="LockSupport特性"></a>LockSupport特性</h3><p>无序：在子线程中预先释放许可，main线程中获取许可直接返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Thread main = Thread.currentThread();</span><br><span class="line"><span class="keyword">new</span> Thread( ()-&gt;&#123;</span><br><span class="line">    LockSupport.unpark(main);</span><br><span class="line">&#125;).start();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">LockSupport.park();</span><br><span class="line">System.out.println(<span class="string">"main结束"</span>);</span><br></pre></td></tr></table></figure><p>main线程中创建子线程直接对main线程进行许可释放。main线程sleep1秒钟后获得许可直接返回控制台输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">main结束</span><br></pre></td></tr></table></figure><p>不可重入：如果多次调用park线程直接进入死锁</p><p>子线程各种重复调用两次LockSupport.unpark(main)方法，main线程中同样的重复调用LockSupport.park()方法，我们认为的情况是，释放了两次许可后，获取两次许可都应该是立即返回并在控制台输出：main结束，但是实际情况并非如此而是直接发生了死锁</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;创建锁和其他同步类的基础同步原语。该类使每个线程都关联一个许可(permit)。调用park方法时，如果许可可用那么立即返回否则就阻塞，调用unpark释放许可。&lt;/p&gt;&lt;h3 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://mxzenf123.github.io/index.html/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java并发编程" scheme="https://mxzenf123.github.io/index.html/tags/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>线程安全和不可变性</title>
    <link href="https://mxzenf123.github.io/index.html/2021/07/18/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E5%92%8C%E4%B8%8D%E5%8F%AF%E5%8F%98%E6%80%A7/"/>
    <id>https://mxzenf123.github.io/index.html/2021/07/18/线程安全和不可变性/</id>
    <published>2021-07-18T07:54:17.190Z</published>
    <updated>2021-07-18T08:59:26.150Z</updated>
    
    <content type="html"><![CDATA[<p>多个线程对同一个变量进行了写操作才会出现竟态条件。只是读操作是永远不可能产生竟态条件的。</p><h3 id="创建不可变的对象"><a href="#创建不可变的对象" class="headerlink" title="创建不可变的对象"></a>创建不可变的对象</h3><p>我们可以创建一个不可变的对象保证多线程访问的时候不会被修改从而实现了线程安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImmutableValue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImmutableValue</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们创建了一个类ImmutableValue，该类创建的时候通过构造方法对成员变量value进行赋值，类没有提供修改value值的方法，一旦创建类那么value也就不再进行修改。提供了getValue()方法获取value的值。</p><h3 id="对象引用仍然是线程不安全的"><a href="#对象引用仍然是线程不安全的" class="headerlink" title="对象引用仍然是线程不安全的"></a>对象引用仍然是线程不安全的</h3><p>虽然类ImmutableValue是不可变的，在多线程环境下不存在线程安全问题。但是不可变的类的引用确实线程不安全的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImmutableValueHolder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ImmutableValue value = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImmutableValueHolder</span><span class="params">(ImmutableValue value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(ImmutableValue value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在类中ImmutableValueHolder属性value是不可变的类，但是该类本身会改变value的引用。虽然ImmutableValue是不可变的，但是作为该类中的引用时却是线程不安全的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;多个线程对同一个变量进行了写操作才会出现竟态条件。只是读操作是永远不可能产生竟态条件的。&lt;/p&gt;&lt;h3 id=&quot;创建不可变的对象&quot;&gt;&lt;a href=&quot;#创建不可变的对象&quot; class=&quot;headerlink&quot; title=&quot;创建不可变的对象&quot;&gt;&lt;/a&gt;创建不可变的对象&lt;/h
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://mxzenf123.github.io/index.html/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java并发编程" scheme="https://mxzenf123.github.io/index.html/tags/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程和共享资源问题</title>
    <link href="https://mxzenf123.github.io/index.html/2021/07/11/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%85%B1%E4%BA%AB%E8%B5%84%E6%BA%90%E9%97%AE%E9%A2%98/"/>
    <id>https://mxzenf123.github.io/index.html/2021/07/11/多线程和共享资源问题/</id>
    <published>2021-07-11T07:16:40.368Z</published>
    <updated>2021-07-11T08:22:31.368Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jvm和java线程"><a href="#jvm和java线程" class="headerlink" title="jvm和java线程"></a>jvm和java线程</h3><p>java所有的线程都工作在一个jvm实例下，jvm为每个线程运行分配所需要的空间：栈和堆。堆是jvm分配所有线程共享存储对象的区域，线程栈保存着线程运行时信息。如果多个线程同时对堆中分配对象（基本数据类型）进行操作，就会发生多线程共享问题</p><h3 id="线程共享资源"><a href="#线程共享资源" class="headerlink" title="线程共享资源"></a>线程共享资源</h3><p>我们写一个功能为两个线程同时累加一个变量500万次，最后输出累加结果，我们期望的结果是1000万，最后的结果是否和我们期望的一致呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">Runnable r1 = ()-&gt;&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">500</span>*<span class="number">10000</span>;i++) &#123;</span><br><span class="line">        sum++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Thread thread1 = <span class="keyword">new</span> Thread(r1);</span><br><span class="line">Thread thread2 = <span class="keyword">new</span> Thread(r1);</span><br><span class="line">thread1.start();</span><br><span class="line">thread2.start();</span><br><span class="line">thread1.join();</span><br><span class="line">thread2.join();</span><br><span class="line">log.debug(<span class="string">"累加结果："</span> + sum);</span><br></pre></td></tr></table></figure><p>我们定义了一静态int变量并初始化为0。定义了一段可执行代码对sum自增500万次。创建两个线程执行它，并在main线程中等待这两个线程执行完毕后输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2021-07-11 15:45:07.574 [main] DEBUG org.yangxin.thread.ThreadTest:102 - 累加结果：5358584</span><br></pre></td></tr></table></figure><p>输出结果和我们预期相差的天远地远，不管我们运行多少次上面的代码，输出结果可能不同，但是几乎没有一次是我们期望的结果1000万，那么问题到底出在哪里呢？</p><h3 id="多线程访问共享变量的秘密"><a href="#多线程访问共享变量的秘密" class="headerlink" title="多线程访问共享变量的秘密"></a>多线程访问共享变量的秘密</h3><p>上面代码中可执行代码sum++实际有三个操作，首先是把sum的值取出来，然后加1，把加到的结果再赋值给sum变量。</p><p>执行这段代码的两个线程thread1和thread2，可能出现如果sum=0的时候，两个线程同时执行这段代码thread1将sum变量副本值0拷贝到自己本地，同时thread2也将sum变量副本值0，thread1执行完后sum=1再将该值拷贝到堆中，thread2也做同样的操作，这个时候sum为1而不是2</p><h3 id="改进后的代码"><a href="#改进后的代码" class="headerlink" title="改进后的代码"></a>改进后的代码</h3><p>我们将sum++自增操作放在关键字synchronized代码块中再来运行观察结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (ThreadTest.class) &#123;</span><br><span class="line">    sum++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2021-07-11 16:11:01.626 [main] DEBUG org.yangxin.thread.ThreadTest:104 - 累加结果：10000000</span><br></pre></td></tr></table></figure><p>结果终于达到了我们的预期输出了1000万</p><h3 id="竞态条件和临界区"><a href="#竞态条件和临界区" class="headerlink" title="竞态条件和临界区"></a>竞态条件和临界区</h3><p>多线程操作同一资源（写）时，如果对于先后顺序敏感，就称存在竞态条件。导致竞态条件变化的代码块叫做临界区。上述代码中sum就是一个竞态条件，sum++就是一个临界区，代码中加入了同步关键字synchronized同步来解决，更多java同步和锁的内容会在后续文章继续介绍</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;jvm和java线程&quot;&gt;&lt;a href=&quot;#jvm和java线程&quot; class=&quot;headerlink&quot; title=&quot;jvm和java线程&quot;&gt;&lt;/a&gt;jvm和java线程&lt;/h3&gt;&lt;p&gt;java所有的线程都工作在一个jvm实例下，jvm为每个线程运行分配所需要的
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://mxzenf123.github.io/index.html/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java并发编程" scheme="https://mxzenf123.github.io/index.html/tags/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Thread类的join方法</title>
    <link href="https://mxzenf123.github.io/index.html/2021/06/27/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E9%94%81/"/>
    <id>https://mxzenf123.github.io/index.html/2021/06/27/为什么需要锁/</id>
    <published>2021-06-27T05:42:59.199Z</published>
    <updated>2021-06-20T03:45:26.972Z</updated>
    
    <content type="html"><![CDATA[<p>如果两个线程A和B，线程A要等待线程B执行完后再继续执行，那么可以在线程A中调用线程B实例的join方法。</p><p>现在通过代码来直观感受一下，在main线程中创建demo1线程，并调用demo1线程的join方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">log.debug(Thread.currentThread().getName() + <span class="string">"开始"</span>);</span><br><span class="line"></span><br><span class="line">Thread thread1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        log.debug(Thread.currentThread().getName() + <span class="string">"开始"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        log.debug(Thread.currentThread().getName() + <span class="string">"结束"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">"demo1"</span>);</span><br><span class="line">thread1.start();</span><br><span class="line">thread1.join();</span><br><span class="line">log.debug(Thread.currentThread().getName() + <span class="string">"结束"</span>);</span><br></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">56</span>:<span class="number">39.620</span> [main] DEBUG org.yangxin.thread.ThreadTest:<span class="number">86</span> - main开始</span><br><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">56</span>:<span class="number">39.668</span> [demo1] DEBUG org.yangxin.thread.ThreadTest:<span class="number">90</span> - demo1开始</span><br><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">56</span>:<span class="number">41.680</span> [demo1] DEBUG org.yangxin.thread.ThreadTest:<span class="number">92</span> - demo1结束</span><br><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">56</span>:<span class="number">41.681</span> [main] DEBUG org.yangxin.thread.ThreadTest:<span class="number">100</span> - main结束</span><br></pre></td></tr></table></figure><p>可以看到运行结果和我们预想的输出顺序基本一致，main线程在结束前调用demo1.join，demo1线程sleep2秒后执行完毕，main线程继续完成执行。</p><p>如果join的线程执行时间未知，main线程可能永远的等待下去，这个时候我们希望等待一定的时间不管join的线程是否执行完毕，main线程继续往下执行，代码可更改在调用thread1.jion方法时加上参数thread1.join(1000)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thread1.join(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>main线程等待demo1线程1秒钟，1秒钟后main线程继续执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">20</span> <span class="number">11</span>:<span class="number">29</span>:<span class="number">53.055</span> [main] DEBUG org.yangxin.thread.ThreadTest:<span class="number">86</span> - main开始</span><br><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">20</span> <span class="number">11</span>:<span class="number">29</span>:<span class="number">53.105</span> [demo1] DEBUG org.yangxin.thread.ThreadTest:<span class="number">89</span> - demo1开始</span><br><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">20</span> <span class="number">11</span>:<span class="number">29</span>:<span class="number">54.119</span> [main] DEBUG org.yangxin.thread.ThreadTest:<span class="number">99</span> - main结束</span><br><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">20</span> <span class="number">11</span>:<span class="number">29</span>:<span class="number">55.110</span> [demo1] DEBUG org.yangxin.thread.ThreadTest:<span class="number">95</span> - demo1开始</span><br></pre></td></tr></table></figure><p>控制台输出demo1开始执行后，main等待了1秒钟然后继续执行并输出执行完毕，再过了一秒钟demo1执行完毕。</p><p>join还遗留了一个问题，main线程何时怎么样被notify的；查看了start方法，里面并没有notify的代码，初步推断是在start0这个native方法里面唤醒的main线程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果两个线程A和B，线程A要等待线程B执行完后再继续执行，那么可以在线程A中调用线程B实例的join方法。&lt;/p&gt;&lt;p&gt;现在通过代码来直观感受一下，在main线程中创建demo1线程，并调用demo1线程的join方法。&lt;/p&gt;&lt;figure class=&quot;highligh
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://mxzenf123.github.io/index.html/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java并发编程" scheme="https://mxzenf123.github.io/index.html/tags/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Thread类的join方法</title>
    <link href="https://mxzenf123.github.io/index.html/2021/06/20/Thread%E7%B1%BB%E7%9A%84join%E6%96%B9%E6%B3%95/"/>
    <id>https://mxzenf123.github.io/index.html/2021/06/20/Thread类的join方法/</id>
    <published>2021-06-20T02:07:53.006Z</published>
    <updated>2021-06-20T03:45:26.972Z</updated>
    
    <content type="html"><![CDATA[<p>如果两个线程A和B，线程A要等待线程B执行完后再继续执行，那么可以在线程A中调用线程B实例的join方法。</p><p>现在通过代码来直观感受一下，在main线程中创建demo1线程，并调用demo1线程的join方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">log.debug(Thread.currentThread().getName() + <span class="string">"开始"</span>);</span><br><span class="line"></span><br><span class="line">Thread thread1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        log.debug(Thread.currentThread().getName() + <span class="string">"开始"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        log.debug(Thread.currentThread().getName() + <span class="string">"结束"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">"demo1"</span>);</span><br><span class="line">thread1.start();</span><br><span class="line">thread1.join();</span><br><span class="line">log.debug(Thread.currentThread().getName() + <span class="string">"结束"</span>);</span><br></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">56</span>:<span class="number">39.620</span> [main] DEBUG org.yangxin.thread.ThreadTest:<span class="number">86</span> - main开始</span><br><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">56</span>:<span class="number">39.668</span> [demo1] DEBUG org.yangxin.thread.ThreadTest:<span class="number">90</span> - demo1开始</span><br><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">56</span>:<span class="number">41.680</span> [demo1] DEBUG org.yangxin.thread.ThreadTest:<span class="number">92</span> - demo1结束</span><br><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">56</span>:<span class="number">41.681</span> [main] DEBUG org.yangxin.thread.ThreadTest:<span class="number">100</span> - main结束</span><br></pre></td></tr></table></figure><p>可以看到运行结果和我们预想的输出顺序基本一致，main线程在结束前调用demo1.join，demo1线程sleep2秒后执行完毕，main线程继续完成执行。</p><p>如果join的线程执行时间未知，main线程可能永远的等待下去，这个时候我们希望等待一定的时间不管join的线程是否执行完毕，main线程继续往下执行，代码可更改在调用thread1.jion方法时加上参数thread1.join(1000)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thread1.join(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>main线程等待demo1线程1秒钟，1秒钟后main线程继续执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">20</span> <span class="number">11</span>:<span class="number">29</span>:<span class="number">53.055</span> [main] DEBUG org.yangxin.thread.ThreadTest:<span class="number">86</span> - main开始</span><br><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">20</span> <span class="number">11</span>:<span class="number">29</span>:<span class="number">53.105</span> [demo1] DEBUG org.yangxin.thread.ThreadTest:<span class="number">89</span> - demo1开始</span><br><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">20</span> <span class="number">11</span>:<span class="number">29</span>:<span class="number">54.119</span> [main] DEBUG org.yangxin.thread.ThreadTest:<span class="number">99</span> - main结束</span><br><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">20</span> <span class="number">11</span>:<span class="number">29</span>:<span class="number">55.110</span> [demo1] DEBUG org.yangxin.thread.ThreadTest:<span class="number">95</span> - demo1开始</span><br></pre></td></tr></table></figure><p>控制台输出demo1开始执行后，main等待了1秒钟然后继续执行并输出执行完毕，再过了一秒钟demo1执行完毕。</p><p>join还遗留了一个问题，main线程何时怎么样被notify的；查看了start方法，里面并没有notify的代码，初步推断是在start0这个native方法里面唤醒的main线程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果两个线程A和B，线程A要等待线程B执行完后再继续执行，那么可以在线程A中调用线程B实例的join方法。&lt;/p&gt;&lt;p&gt;现在通过代码来直观感受一下，在main线程中创建demo1线程，并调用demo1线程的join方法。&lt;/p&gt;&lt;figure class=&quot;highligh
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://mxzenf123.github.io/index.html/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java并发编程" scheme="https://mxzenf123.github.io/index.html/tags/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>线程的状态</title>
    <link href="https://mxzenf123.github.io/index.html/2021/06/06/%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81/"/>
    <id>https://mxzenf123.github.io/index.html/2021/06/06/线程的状态/</id>
    <published>2021-06-06T08:01:37.770Z</published>
    <updated>2021-06-06T09:28:30.031Z</updated>
    
    <content type="html"><![CDATA[<p>jdk的Thread源码中对线程的状态进行了六种定义，分别是：</p><ol><li>NEW</li></ol><p>线程已经被创建也就是new出来，但是并没执行</p><ol start="2"><li>RUNNABLE</li></ol><p>Thread调用了start的方法，但是不代表线程立马执行，而是可执行状态。在单核CPU的电脑下，CPU每次只能够执行一个线程，所以不是所有线程并不是都可以立马执行。有的也把这个状态拆分为两个状态：RUNNING和READY，这两个状态在JDK中是没有的是人为的方便理解</p><ol start="3"><li>BLOCKED</li></ol><p>线程在等待一个monitor lock，多个线程执行使用了synchronized的代码块（方法）。其他线程获得了这个monitor lock，那么这个线程执行同步代码块获得锁之前的状态</p><ol start="4"><li>WAITING</li></ol><p>当前线程执行代码条调用了特定的方法会进行等待状态：</p><ul><li>Object.wait</li><li>Thread.join</li><li>LockSupport.part()</li></ul><ol start="5"><li>TIMED_WAITING</li></ol><p>在当前线程执行代码中调用了特定的方法指定等待时间：</p><ul><li>Thread.sleep</li><li>Object.wait</li><li>Thread.join</li><li>LockSupport.parkNanos</li><li>LockSupport.parkUntil</li></ul><ol start="6"><li>TERMINATED</li></ol><p>线程执行完毕</p><p>上面的所有状态都从NEW开始，TERMINATED结束，其他状态不一定每个状态都会经历，每个状态可以经历多次也可以一次也不经历。</p><p>下面用代码的形式结果虚拟机指令jps和jstack来观察线程不同情况下的状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread( ()-&gt;&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="comment">//干点什么</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="string">"demo1"</span>).start();</span><br></pre></td></tr></table></figure><p>上面代码直接创建了一个名为demo1的线程，代码很简洁，直接无限while，现在通过虚拟机来观察线程状态</p><blockquote><p>“demo1” #12 prio=5 os_prio=0 tid=0x000001e89e2cf000 nid=0x20f4 runnable [0x00000082d4eff000]<br>java.lang.Thread.State: <strong>RUNNABLE</strong><br>at org.yangxin.thread.ThreadTest.lambda$main$4(ThreadTest.java:81)<br>at org.yangxin.thread.ThreadTest$$Lambda$1/109961541.run(Unknown Source)<br>at java.lang.Thread.run(Thread.java:748)</p></blockquote><p>可以看到demo1线程处于<strong>RUNNABLE</strong>状态</p><p>synchronized关键字可以修饰方法也可以修饰代码块（static），修饰对象不一样对应的锁也不一样。Object的wait方法只能够在synchronized中使用，如果锁的对象和wait对象不一致，运行会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">Object o = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="keyword">new</span> Thread( ()-&gt;&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"：我在waiting"</span>);</span><br><span class="line">                o.wait();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"：我被唤醒了"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="string">"demo1"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread( ()-&gt;&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2</span>*<span class="number">1000</span>);</span><br><span class="line">            o.notifyAll();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"：我把你们都唤醒了"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">&#125;, <span class="string">"demo2"</span>).start();</span><br></pre></td></tr></table></figure><p>上面的代码创建了两个锁对象，线程demo1和demo2使用lock锁执行了一段同步代码。demo1线程调用了另一个锁对象的wait方法等待被notify，线程demo2sleep两秒后调用对象o的notifyAll方法让demo1执行，运行上面代码，控制台输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">demo1：我在waiting</span><br><span class="line">Exception in thread &quot;demo1&quot; java.lang.IllegalMonitorStateException</span><br><span class="line">at java.lang.Object.wait(Native Method)</span><br><span class="line">at java.lang.Object.wait(Object.java:502)</span><br><span class="line">at org.yangxin.thread.ThreadTest.lambda$main$4(ThreadTest.java:86)</span><br><span class="line">at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure><p>抛出了异常，demo1中o.wait方法，这就说明了synchronized关键字执行代码块里不能够使用其他对象的wait方法，当然离开synchronized直接执行Object.wait也是不行的。</p><p>我们把上面代码中对象o.wait和o.notifyAll更换为lock.wait和lock.notifyAll再次运行查看线程状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">"demo2" #13 prio=5 os_prio=0 tid=0x0000019fcee3b000 nid=0x24a8 waiting on condition [0x00000012dceff000]</span><br><span class="line">   java.lang.Thread.State: TIMED_WAITING (sleeping)</span><br><span class="line">at java.lang.Thread.sleep(Native Method)</span><br><span class="line">at org.yangxin.thread.ThreadTest.lambda$main$<span class="number">5</span>(ThreadTest.java:<span class="number">97</span>)</span><br><span class="line">- locked &lt;<span class="number">0x000000076bd585d8</span>&gt; (a java.lang.Object)</span><br><span class="line">at org.yangxin.thread.ThreadTest$$Lambda$<span class="number">2</span>/<span class="number">670700378</span>.run(Unknown Source)</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line"></span><br><span class="line">"demo1" #12 prio=5 os_prio=0 tid=0x0000019fcee2d800 nid=0x2354 in Object.wait() [0x00000012dcdff000]</span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">at java.lang.Object.wait(Native Method)</span><br><span class="line">- waiting on &lt;<span class="number">0x000000076bd585d8</span>&gt; (a java.lang.Object)</span><br><span class="line">at java.lang.Object.wait(Object.java:<span class="number">502</span>)</span><br><span class="line">at org.yangxin.thread.ThreadTest.lambda$main$<span class="number">4</span>(ThreadTest.java:<span class="number">86</span>)</span><br><span class="line">- locked &lt;<span class="number">0x000000076bd585d8</span>&gt; (a java.lang.Object)</span><br><span class="line">at org.yangxin.thread.ThreadTest$$Lambda$<span class="number">1</span>/<span class="number">193064360</span>.run(Unknown Source)</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br></pre></td></tr></table></figure><p>可以看到demo1已经处于WAITING状态了，由于demo2调用了sleep方法所以线程处于TIMED_WAITING状态。请注意demo1线程中<em>locked &lt;0x000000076bd585d8&gt; (a java.lang.Object)</em> 和 <em>- waiting on &lt;0x000000076bd585d8&gt; (a java.lang.Object)</em>，对应的demo2中的 <em>- locked &lt;0x000000076bd585d8&gt; (a java.lang.Object)</em>，两个线程都和同一把锁关联，demo1调用wait方法后释放锁进入WAITING状态继续等待获取该锁，demo2持有锁TIMED-WAITING执行完成后释放锁。</p><p>对上面代码去掉wait和notifyAll方法后调整如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="keyword">new</span> Thread( ()-&gt;&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">2</span>*<span class="number">2000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="string">"demo1"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread( ()-&gt;&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">&#125;, <span class="string">"demo2"</span>).start();</span><br></pre></td></tr></table></figure><p>线程demo1调用sleep保证demo2获取到锁，demo2获取到锁后进入while循环，两线程状态如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">"demo2" #13 prio=5 os_prio=0 tid=0x0000012dd94cb800 nid=0x326c runnable [0x0000000bdbdfe000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">at org.yangxin.thread.ThreadTest.lambda$main$<span class="number">5</span>(ThreadTest.java:<span class="number">96</span>)</span><br><span class="line">- locked &lt;<span class="number">0x000000076bd583d8</span>&gt; (a java.lang.Object)</span><br><span class="line">at org.yangxin.thread.ThreadTest$$Lambda$<span class="number">2</span>/<span class="number">670700378</span>.run(Unknown Source)</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line"></span><br><span class="line">"demo1" #12 prio=5 os_prio=0 tid=0x0000012dd94ca800 nid=0x35b8 waiting for monitor entry [0x0000000bdbcff000]</span><br><span class="line">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">at org.yangxin.thread.ThreadTest.lambda$main$<span class="number">4</span>(ThreadTest.java:<span class="number">90</span>)</span><br><span class="line">- waiting to lock &lt;<span class="number">0x000000076bd583d8</span>&gt; (a java.lang.Object)</span><br><span class="line">at org.yangxin.thread.ThreadTest$$Lambda$<span class="number">1</span>/<span class="number">193064360</span>.run(Unknown Source)</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br></pre></td></tr></table></figure><p>可以看到demo1处于BLOCKED状态等待demo2释放锁。</p><p>写到最后，从网上找到一份线程状态和调用对应方法的状态图供参考</p><p><img src="/images/2021/1.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;jdk的Thread源码中对线程的状态进行了六种定义，分别是：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;NEW&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;线程已经被创建也就是new出来，但是并没执行&lt;/p&gt;&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;RUNNABLE&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Thread调用了star
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://mxzenf123.github.io/index.html/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java并发编程" scheme="https://mxzenf123.github.io/index.html/tags/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>线程的休眠</title>
    <link href="https://mxzenf123.github.io/index.html/2021/05/30/%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BC%91%E7%9C%A0/"/>
    <id>https://mxzenf123.github.io/index.html/2021/05/30/线程的休眠/</id>
    <published>2021-05-30T07:29:55.930Z</published>
    <updated>2021-05-30T08:28:32.407Z</updated>
    
    <content type="html"><![CDATA[<p>线程Thread提供了一个<strong>sleep</strong>方法，让线程停止请求CPU执行，等待指定的时间后再继续执行。我的jdk1.8版本，sleep在jdk中源码，是一个native方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Causes the currently executing thread to sleep (temporarily cease</span></span><br><span class="line"><span class="comment">* execution) for the specified number of milliseconds, subject to</span></span><br><span class="line"><span class="comment">* the precision and accuracy of system timers and schedulers. The thread</span></span><br><span class="line"><span class="comment">* does not lose ownership of any monitors.</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>  millis</span></span><br><span class="line"><span class="comment">*         the length of time to sleep in milliseconds</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span>  IllegalArgumentException</span></span><br><span class="line"><span class="comment">*          if the value of &#123;<span class="doctag">@code</span> millis&#125; is negative</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span>  InterruptedException</span></span><br><span class="line"><span class="comment">*          if any thread has interrupted the current thread. The</span></span><br><span class="line"><span class="comment">*          &lt;i&gt;interrupted status&lt;/i&gt; of the current thread is</span></span><br><span class="line"><span class="comment">*          cleared when this exception is thrown.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millis)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br></pre></td></tr></table></figure><p>代码说明主要表达有3点</p><ol><li>当前线程在指定时间内暂停执行</li><li>不会释放自己获得的监视器（锁）</li><li>sleep是响应中断的</li></ol><h2 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h2><p>线程从调用start方法就会一直执行下去直到执行完成，如果我们想让线程暂停一会儿不抢占CPU执行，可以调用sleep方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread( ()-&gt;&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//业务代码</span></span><br><span class="line">            <span class="comment">//do somethings</span></span><br><span class="line">            Thread.sleep(<span class="number">1</span>*<span class="number">1000</span>);</span><br><span class="line">            System.out.println(LocalTime.now()+<span class="string">":sleep了1秒钟"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="string">"demo1"</span>).start();</span><br></pre></td></tr></table></figure><p>我们会看到控制台输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">16</span>:<span class="number">03</span>:<span class="number">39.494</span>:sleep了<span class="number">1</span>秒钟</span><br><span class="line"><span class="number">16</span>:<span class="number">03</span>:<span class="number">40.508</span>:sleep了<span class="number">1</span>秒钟</span><br><span class="line"><span class="number">16</span>:<span class="number">03</span>:<span class="number">41.522</span>:sleep了<span class="number">1</span>秒钟</span><br><span class="line"><span class="number">16</span>:<span class="number">03</span>:<span class="number">42.536</span>:sleep了<span class="number">1</span>秒钟</span><br></pre></td></tr></table></figure><p>上面代码每个一秒钟输出一次，从输出来看确实也是差不多每个一秒执行一次</p><p>我们来看看线程sleep的状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"demo1" #12 prio=5 os_prio=0 tid=0x0000024f3a16b800 nid=0x2354 waiting on condition [0x000000c6153ff000]</span><br><span class="line">   java.lang.Thread.State: TIMED_WAITING (sleeping)</span><br><span class="line">at java.lang.Thread.sleep(Native Method)</span><br><span class="line">at org.yangxin.thread.ThreadTest.lambda$main$<span class="number">3</span>(ThreadTest.java:<span class="number">58</span>)</span><br><span class="line">at org.yangxin.thread.ThreadTest$$Lambda$<span class="number">1</span>/<span class="number">109961541</span>.run(Unknown Source)</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br></pre></td></tr></table></figure><p>sleep后线程的状态为TIME_WAITING和jdk中描述的一致</p><h2 id="sleep会释放锁吗"><a href="#sleep会释放锁吗" class="headerlink" title="sleep会释放锁吗"></a>sleep会释放锁吗</h2><p>我们创建两个线程，<strong>synchronized</strong>通过关键字获取锁执行线程代码，第一个线程demo1获取锁后立马长时间sleep(20秒)，紧接着第二个线程执行，如果sleep线程释放锁，我们会1秒后立马看到第二个demo2线程输出，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="keyword">new</span> Thread( ()-&gt;&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">        System.out.println(<span class="string">"demo1获取了锁"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">20</span>*<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">"demo1执行完毕"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="string">"demo1"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread( ()-&gt;&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1</span>*<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">        System.out.println(<span class="string">"demo2获取到了锁"</span>);</span><br><span class="line">        System.out.println(<span class="string">"demo2执行完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">"demo2"</span>).start();</span><br></pre></td></tr></table></figure><p>代码执行时候我们通过虚拟机命令查看线程状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">"demo2" #13 prio=5 os_prio=0 tid=0x0000013320fee800 nid=0x30e4 waiting for monitor entry [0x0000000f9c0ff000]</span><br><span class="line">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">at org.yangxin.thread.ThreadTest.lambda$main$<span class="number">4</span>(ThreadTest.java:<span class="number">75</span>)</span><br><span class="line">- waiting to lock &lt;<span class="number">0x000000076bd56eb8</span>&gt; (a java.lang.Object)</span><br><span class="line">at org.yangxin.thread.ThreadTest$$Lambda$<span class="number">2</span>/<span class="number">670700378</span>.run(Unknown Source)</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line"></span><br><span class="line">"demo1" #12 prio=5 os_prio=0 tid=0x0000013320fea000 nid=0x25a0 waiting on condition [0x0000000f9bffe000]</span><br><span class="line">   java.lang.Thread.State: TIMED_WAITING (sleeping)</span><br><span class="line">at java.lang.Thread.sleep(Native Method)</span><br><span class="line">at org.yangxin.thread.ThreadTest.lambda$main$<span class="number">3</span>(ThreadTest.java:<span class="number">60</span>)</span><br><span class="line">- locked &lt;<span class="number">0x000000076bd56eb8</span>&gt; (a java.lang.Object)</span><br><span class="line">at org.yangxin.thread.ThreadTest$$Lambda$<span class="number">1</span>/<span class="number">193064360</span>.run(Unknown Source)</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br></pre></td></tr></table></figure><p>线程的虚拟机状态已经说明了一切，demo2线程仍然是BLOCKED状态，正在等待demo1获取的锁lock；demo1在等待sleep结束时间并持有锁lock。控制台输出也印证了我们的分析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">16:28:02.349，demo1获取了锁</span><br><span class="line">16:28:22.364，demo1执行完毕</span><br><span class="line">16:28:22.364，demo2获取到了锁</span><br><span class="line">16:28:22.364，demo2执行完毕</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;线程Thread提供了一个&lt;strong&gt;sleep&lt;/strong&gt;方法，让线程停止请求CPU执行，等待指定的时间后再继续执行。我的jdk1.8版本，sleep在jdk中源码，是一个native方法&lt;/p&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;t
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://mxzenf123.github.io/index.html/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java并发编程" scheme="https://mxzenf123.github.io/index.html/tags/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>守护线程</title>
    <link href="https://mxzenf123.github.io/index.html/2021/05/23/%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B/"/>
    <id>https://mxzenf123.github.io/index.html/2021/05/23/守护线程/</id>
    <published>2021-05-23T07:58:48.787Z</published>
    <updated>2021-05-23T08:35:33.336Z</updated>
    
    <content type="html"><![CDATA[<p>在java中只有两类线程，用户线程和守护线程。守护线程编程者也可以自己创建，本质上这两类线程没有区别。唯一的联系就是，如果用户线程都执行完了，那么守护线程也没有存在的价值了，引入jvm一段话：</p><blockquote><p>The Java Virtual Machine exits when the only threads running are all daemon threads.JVM</p></blockquote><p>大意是java虚拟机会在所有线程都是守护线程的情况下退出</p><h3 id="如何使用守护线程"><a href="#如何使用守护线程" class="headerlink" title="如何使用守护线程"></a>如何使用守护线程</h3><p>一，如何设置线程为守护线程</p><p>在创建线程start之前使用Thread的setDaemon(boolean on)方法。线程start后是无法设为守护线程的并且会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Thread thread1 = <span class="keyword">new</span> Thread(()-&gt;&#123;&#125;);</span><br><span class="line">thread1.start();</span><br><span class="line">thread1.setDaemon(<span class="keyword">true</span>);<span class="comment">//报错</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *控制台输出</span></span><br><span class="line"><span class="comment"> Exception in thread "main" java.lang.IllegalThreadStateException</span></span><br><span class="line"><span class="comment">at java.lang.Thread.setDaemon(Thread.java:1359)</span></span><br><span class="line"><span class="comment">at org.yangxin.thread.ThreadTest.main(ThreadTest.java:52)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>如果某个线程已经是守护线程了，是否可以让他变为用户线程？答案肯定是否定的，看这段测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Thread thread1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          System.out.println(<span class="string">"我是守护线程，我开始守护"</span>);</span><br><span class="line">          Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">thread1.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">thread1.start();</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            <span class="keyword">if</span> (thread1.isDaemon()) &#123;</span><br><span class="line">                System.out.println(<span class="string">"我不需要你守护了"</span>);</span><br><span class="line">                thread1.setDaemon(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><p>代码开始创建一个线程为守护线程并每2描述输出一次内容到控制台，第二个为普通的用户线程，每三秒钟检测一次thread1是否为守护线程，如果是就调用thread1.setDaemon(false)方法尝试把thead1设置为非守护线程，然而事与愿违，在守护线程输出第二次内容到控制台的时候，第二个线程却报错了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">我是守护线程，我开始守护</span><br><span class="line">我是守护线程，我开始守护</span><br><span class="line">我不需要你守护了</span><br><span class="line">Exception in thread <span class="string">"Thread-1"</span> java.lang.IllegalThreadStateException</span><br><span class="line">at java.lang.Thread.setDaemon(Thread.java:<span class="number">1359</span>)</span><br><span class="line">at org.yangxin.thread.ThreadTest.lambda$main$<span class="number">4</span>(ThreadTest.java:<span class="number">69</span>)</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br></pre></td></tr></table></figure><p>我们看看Thread的setDaemon方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setDaemon</span><span class="params">(<span class="keyword">boolean</span> on)</span> </span>&#123;</span><br><span class="line">    checkAccess();</span><br><span class="line">    <span class="keyword">if</span> (isAlive()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">    &#125;</span><br><span class="line">    daemon = on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法有个检测isAlive，是个native方法，这同时也解释了为什么要在start之前调用setDaemon方法把用户线程变为守护线程且一旦线程启动就无法变回用户方法，感兴趣的还可以继续实验在setDaemon(true)后立马setDaemon(false)是否成功</p><p>二，守护线程正确使用姿势</p><p>守护线程往往是对用户线程进行服务的而不应该有业务代码，可以回收资源，作为调度线程来使用，因为一但用户线程完成了工作，守护线程如果还有像写文件网络数据读取任务，那么可能发生意想不到的后果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Thread thread1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"e:"</span> + File.separator+<span class="string">"1.txt"</span>));</span><br><span class="line">              fos.write(<span class="string">"hello thread daemon"</span>.getBytes());</span><br><span class="line">              Thread.sleep(<span class="number">1</span>);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  thread1.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">  thread1.start();</span><br></pre></td></tr></table></figure><p>这段代码在守护线程中写入”hello thread daemon”到文件1.txt中去，运行后却发现文件中没有任何内容，因为根本来不及写数据到磁盘中虚拟机就退出了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在java中只有两类线程，用户线程和守护线程。守护线程编程者也可以自己创建，本质上这两类线程没有区别。唯一的联系就是，如果用户线程都执行完了，那么守护线程也没有存在的价值了，引入jvm一段话：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The Java Virtual Machi
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://mxzenf123.github.io/index.html/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java并发编程" scheme="https://mxzenf123.github.io/index.html/tags/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>创建并运行线程</title>
    <link href="https://mxzenf123.github.io/index.html/2021/05/09/%E5%88%9B%E5%BB%BA%E5%B9%B6%E8%BF%90%E8%A1%8C%E7%BA%BF%E7%A8%8B/"/>
    <id>https://mxzenf123.github.io/index.html/2021/05/09/创建并运行线程/</id>
    <published>2021-05-09T06:06:11.325Z</published>
    <updated>2021-05-09T06:52:03.762Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="在java中创建线程（运行时代码）有三种"><a href="#在java中创建线程（运行时代码）有三种" class="headerlink" title="在java中创建线程（运行时代码）有三种"></a>在java中创建线程（运行时代码）有三种</h3><ol><li>继承Thread，覆写run方法</li><li>实现Runnable接口，实现runnable</li><li>实现Callable接口，实现其call方法</li></ol><p>上面的每种创建方式如果运行时代码会排除检查异常需要进行try处理。1和2都没有返回结果，3执行后有返回结果。</p><p>实际创建线程的方式只有一种，就是创建Thread对象，上面的方式只是创建了线程运行时的代码，这是一个很容易混肴的概念。</p><h2 id="编写线程运行时代码"><a href="#编写线程运行时代码" class="headerlink" title="编写线程运行时代码"></a>编写线程运行时代码</h2><h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><p>继承Thread类并且覆写run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mythread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"自定义Thread类运行"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接实例化MyThread类后调用start方法可以启动一个线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mythread mythread = <span class="keyword">new</span> Mythread();</span><br><span class="line">mythread.start();</span><br></pre></td></tr></table></figure><p>如果在main函数中运行，那么在调用start后main线程会继续执行并等待myThread线程执行完毕，执行后控制台会输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自定义Thread类运行</span><br></pre></td></tr></table></figure><h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><p>新建MyThread1类并实现java.lang.Runnable接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"实现Runnable接口线程运行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>这仅仅是提供的线程运行时代码，为了使线程执行MyThread1类中的run方法，这里需要借助Therad类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread1());</span><br><span class="line">thread.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  控制台输出:</span></span><br><span class="line"><span class="comment">  实现Runnable接口线程运行</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>借助java8函数式接口功能也可以这样方便的通过Runnable来提供线程运行时代码来让线程来执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread( ()-&gt;&#123;</span><br><span class="line">  System.out.println(<span class="string">"实现Runnable接口线程运行"</span>);</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><p>这段代码和上面代码输出结果一样</p><h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><p>如果对运行时代码理解程度不够不管用哪种方式创建线程可能会出现以下错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thread.run();</span><br></pre></td></tr></table></figure><p>直接代码中调用run方法，虽然在本例中输出结果一样，但是有本质的区别，为了演示这个区别，对上面代码做如下调整</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前线程："</span>+Thread.currentThread().getName()+<span class="string">",实现Runnable接口线程运行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread1(), <span class="string">"我是杨大哥"</span>);</span><br><span class="line">thread.run();</span><br></pre></td></tr></table></figure><p>在自定义的线程中输出了运行这段代码的当前线程名称，并在创建线程时提供了一个自定义线程名称，再次运行这段代码，输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当前线程：main，实现Runnable接口线程运行</span><br></pre></td></tr></table></figure><p>还是main线程执行了这段线程执行时代码而已并没有真正的创建一个新的线程，将run方法修改为start方法后，输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当前线程：我是杨大哥，实现Runnable接口线程运行</span><br></pre></td></tr></table></figure><p>按照我们预想的线程名称输出了正确的结果</p><p>Callable接口暂时不举例，会在后续java并发包学习的时候再一并总结</p><h2 id="如何选择，创建子类还是实现Runnable接口？"><a href="#如何选择，创建子类还是实现Runnable接口？" class="headerlink" title="如何选择，创建子类还是实现Runnable接口？"></a>如何选择，创建子类还是实现Runnable接口？</h2><p>对于两种方式如何抉择并没有一个标准的答案，只要能够满足需求即可。因为java中有一个线程池的概念，线程池提供了一堆已经创建好的线程，就只差线程运行时代码，如果要使用线程池，更倾向与使用runnable的方式来编写线程运行时代码</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h3 id=&quot;在java中创建线程（运行时代码）有三种&quot;&gt;&lt;a href=&quot;#在java中创建线程（运行时代码）有三种&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://mxzenf123.github.io/index.html/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java并发编程" scheme="https://mxzenf123.github.io/index.html/tags/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>并发编程模型</title>
    <link href="https://mxzenf123.github.io/index.html/2021/04/18/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
    <id>https://mxzenf123.github.io/index.html/2021/04/18/并发编程模型/</id>
    <published>2021-04-18T06:04:40.365Z</published>
    <updated>2021-04-24T06:56:06.221Z</updated>
    
    <content type="html"><![CDATA[<p>我们使用并发系统开处理业务，需要用不同的方式来对业务进行拆分。拆分的方式不同需要考虑的线程之间协作和互斥关系也会不同。</p><h3 id="分布式系统和并发系模型"><a href="#分布式系统和并发系模型" class="headerlink" title="分布式系统和并发系模型"></a>分布式系统和并发系模型</h3><p>分布式系统是进程通过网络进行通信完成工作协同；并发系统是线程之间相互通信。进程和线程在操作系统中有很多相似性，所以分布式系统体系结构也可以用在并发系统中。</p><p>一，并行模型</p><p>将同一个任务分解为不同的部分执行，完成后进行结果汇总。在java中jdk1.7开始引入的forkjoin框架，hadoop中的mapreduce，都体现了并行思想。执行拆解后的任务可以是不同机器也可以是不同的CPU。</p><ol><li>优点</li></ol><p>并行模型很容易理解，容易扩展，将任务拆分后理论上可以增加更多的资源来提升并行度</p><ol start="2"><li>缺点</li></ol><ul><li>共享状态困难</li></ul><p>在并行模型中，每个执行任务的工作者可能会共享一些数据，就需要引入一些工作者之间相互通信的机制并且要考虑竟态和死锁问题。此外，在工作者对共享数据访问/操作时，可能会在工作者之间相互等待而丧失一部分并行性。</p><p>虽然可以通过引入一些非阻塞算法来改善，但是通常情况下非阻塞算法实现起来较为困难。<br>复杂的数据结构也能够解决共享状态带来改观，但往往也不尽人意。比如说一个链表，需要在头部插入一个节点，并且返回指向新加入节点的一个引用，所有其他工作者仍然保持着链表第一个引用无法看到新加入的元素。</p><ul><li>任务执行顺序不确定</li></ul><p>多个工作者并行执行任务无法保证各个工作者先后执行完成的顺序。并行模型的这个特性使得并发系统在任何一个时间节点无法推断当前系统的状态</p><p>二，流水线模型</p><p>富士康流水线组装手机，每个工人只负责手机的某个部分，一部完整的手机组装完成可能会经过数人操作。每个工人无须知道前一个工人或者后一个工人的工作状态，也可以称作无状态模型。</p><p>在java中通常使用非阻塞的IO来实现，非阻塞意味着一旦一个工作者在遇到耗时的IO操作的时候不必停顿下来等待而是继续执行其他任务。IO完成的时候工作者可以继续操作将结果交给下一个工作者。</p><p>有了非阻塞IO模型，可以使用IO操作来确定工作者之间的边界，从而尽可能的利用IO等待时间做更多的事，IO返回结果后，流水线上下一个工作者再继续操作</p><p>并发系统中流水线可能会有多条，同时执行多个作业，甚至一个工作者可以接收到不同工作者传递的作业。</p><p>流水线模型优点：</p><ol><li>工作者之间无须共享状态</li><li>工作者可以是有状态的</li><li>可以保证作业顺序性</li></ol><h4 id="Actors和Channels"><a href="#Actors和Channels" class="headerlink" title="Actors和Channels"></a>Actors和Channels</h4><p>这两个概念是在java中都有对应的实现。java的NIO中引入channel，每个工作者之间通过channel来进行消息传递，而不用知道是谁传的或者将会传给谁，只需要在在通道上注册自己感兴趣的操作即可，这使得流水线上各个工作者之间松散耦合。</p><h3 id="使用哪种模型比较好"><a href="#使用哪种模型比较好" class="headerlink" title="使用哪种模型比较好"></a>使用哪种模型比较好</h3><p>这取决于系统需要干什么，如果业务本身是并行的不需要共享状态，可以使用并行模型比较好。对于很多业务都不是自然独立并行的这种我相信使用流水线模型会发挥系统更大效能</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们使用并发系统开处理业务，需要用不同的方式来对业务进行拆分。拆分的方式不同需要考虑的线程之间协作和互斥关系也会不同。&lt;/p&gt;&lt;h3 id=&quot;分布式系统和并发系模型&quot;&gt;&lt;a href=&quot;#分布式系统和并发系模型&quot; class=&quot;headerlink&quot; title=&quot;分布式系
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://mxzenf123.github.io/index.html/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java并发编程" scheme="https://mxzenf123.github.io/index.html/tags/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程优点</title>
    <link href="https://mxzenf123.github.io/index.html/2021/04/10/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BC%98%E7%82%B9/"/>
    <id>https://mxzenf123.github.io/index.html/2021/04/10/多线程优点/</id>
    <published>2021-04-10T07:06:28.049Z</published>
    <updated>2021-04-10T08:12:04.043Z</updated>
    
    <content type="html"><![CDATA[<p>多线程编程尽管对代码编写带来了一定难度，但是得益于现代多核计算机，一定程度上多线程编程也带来了一些优点：<br></p><ol><li>提升资源利用率</li><li>简化的程序设计</li><li>增加程序响应速度</li></ol><h3 id="更好的资源利用率"><a href="#更好的资源利用率" class="headerlink" title="更好的资源利用率"></a>更好的资源利用率</h3><p>我们在系统中有一个文件处理的场景，需要读取两个文件进行处理。我们使用代码进行模拟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"&lt;-------程序开始执行-------&gt;"</span>);</span><br><span class="line">System.out.println(<span class="string">"读取文件A"</span>);</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">System.out.println(<span class="string">"读取文件A完毕"</span>);</span><br><span class="line">System.out.println(<span class="string">"耗时："</span> + (System.currentTimeMillis()-startTim/<span class="number">1000</span> + <span class="string">"秒。开始处理文件A"</span>);</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">System.out.println(<span class="string">"处理文件A完毕耗时："</span> + (System.currentTimeMill()-startTime) + <span class="string">"秒。开始读取文件B"</span>)</span><br><span class="line">System.out.println(<span class="string">"读取文件B"</span>);</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">System.out.println(<span class="string">"读取文件B完毕"</span>);</span><br><span class="line">System.out.println(<span class="string">"耗时："</span> + (System.currentTimeMillis()-startTim/<span class="number">1000</span> + <span class="string">"秒。开始处理文件B"</span>);</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">System.out.println(<span class="string">"处理文件B完毕耗时："</span> + (System.currentTimeMill()-startTime) + <span class="string">"秒。"</span>);</span><br></pre></td></tr></table></figure><p>这段代码使用Thread.sleep来模拟读取和处理文件，sleep的时候当前main线程就会停止请求CPU，待指定时间后才会再次请求使用CPU，如此反复。<br>程序运行结果如下</p><blockquote><p>&lt;——-程序开始执行——-&gt;<br>读取文件A<br>读取文件A完毕<br><br>耗时：5秒。开始处理文件A<br><br>处理文件A完毕耗时：7002秒。开始读取文件B<br><br>读取文件B<br><br>读取文件B完毕<br><br>耗时：12秒。开始处理文件B<br><br>处理文件B完毕耗时：14003秒。</p></blockquote><p>上面代码并未充分发挥使用CPU，每次读取文件，CPU大多数时间都在等待硬盘IO并未做其他<br>导致了宝贵的CPU资源被浪费。</p><p>我们可以改进上面的代码来更好的利用CPU，在文件A读取完的时候，然后开始读取文件B，这样CPU可以用等待读取文件B的时间去处理文件A，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> start=System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"----------程序开始运行---------"</span>);</span><br><span class="line">System.out.println(<span class="string">"读取A文件开始..."</span>);</span><br><span class="line">Thread.currentThread().sleep(<span class="number">5000</span>);</span><br><span class="line">System.out.println(<span class="string">"读取A文件结束，耗时："</span>+(System.currentTimeMill()-start)/<span class="number">1000</span>+<span class="string">"秒...开始处理A文件，同时开始读取B文件.."</span>);</span><br><span class="line">Thread t1=<span class="keyword">new</span> Thread()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"读取B文件开始..."</span>);</span><br><span class="line">            Thread.currentThread().sleep(<span class="number">5000</span>);</span><br><span class="line">            System.out.println(<span class="string">"读取B文件结束，耗时："</span>+(SystecurrentTimeMillis()-start)/<span class="number">1000</span>+<span class="string">"秒...开始处理B文件"</span>);</span><br><span class="line">            Thread.currentThread().sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(<span class="string">"B文件处理完成..."</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">t1.start();</span><br><span class="line">Thread.currentThread().sleep(<span class="number">2000</span>);</span><br><span class="line">System.out.println(<span class="string">"A文件处理完成..."</span>);</span><br><span class="line">t1.join();</span><br><span class="line">System.out.println(<span class="string">"总耗时:"</span>+(System.currentTimeMillis()-start)/<span class="number">10</span>+<span class="string">"秒"</span>);</span><br></pre></td></tr></table></figure><p>改进后的代码读取和操作文件A和B在不同的两个线程中，处理文件A的时候另外一个进程可以同时读取文件B这样使CPU资源利用得到了提升。<br>程序执行结果如下</p><blockquote><p>———-程序开始运行———<br><br>读取A文件开始…<br><br>读取A文件结束，耗时：5秒…开始处理A文件，同时开始读取B文件..<br><br>读取B文件开始…<br><br>A文件处理完成…<br><br>读取B文件结束，耗时：10秒…开始处理B文件<br><br>B文件处理完成…<br>总耗时:1200秒</p></blockquote><p>总的来说，磁盘IO的速度和CPU速度的远远不匹配的才致使有了优化的空间。当然不止是磁盘IO还有可能是其他相对于CPU的耗时操作，如网络IO，用户输入等</p><h3 id="程序设计简单"><a href="#程序设计简单" class="headerlink" title="程序设计简单"></a>程序设计简单</h3><p>如果要在单线程中实现上面优化有的代码，编写代码复杂度肯定要远远大于多线程的编程。<br>单线程中处理多个文件需要代码实现记住每个文件读取的状态和操作，复杂度肯定比多线程要大</p><h3 id="增加程序响应速度"><a href="#增加程序响应速度" class="headerlink" title="增加程序响应速度"></a>增加程序响应速度</h3><p>在网络编程BIO中，我们使用一个线程来监听端口并处理响应，典型的伪代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 服务器未关闭:</span><br><span class="line">  监听端口来的请求</span><br><span class="line">  处理请求</span><br></pre></td></tr></table></figure><p>如果某个请求很耗时，那么此期间服务端就不能够接受其他客户端来的请求。一个BIO下替代的方案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 服务器未关闭:</span><br><span class="line">  监听端口请求</span><br><span class="line">  提交一个线程来处理该请求</span><br></pre></td></tr></table></figure><p>无疑这种方式要比第一个方式给客户端带来了更快的响应，这里不做展开意在说明多线程对于程序响应优势。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;多线程编程尽管对代码编写带来了一定难度，但是得益于现代多核计算机，一定程度上多线程编程也带来了一些优点：&lt;br&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;提升资源利用率&lt;/li&gt;&lt;li&gt;简化的程序设计&lt;/li&gt;&lt;li&gt;增加程序响应速度&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&quot;更好的资源利用率&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://mxzenf123.github.io/index.html/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java并发编程" scheme="https://mxzenf123.github.io/index.html/tags/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java并发编程基本知识介绍</title>
    <link href="https://mxzenf123.github.io/index.html/2021/04/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D/"/>
    <id>https://mxzenf123.github.io/index.html/2021/04/05/并发编程基本知识介绍/</id>
    <published>2021-04-05T07:48:28.463Z</published>
    <updated>2021-04-05T08:50:43.532Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是并发？"><a href="#什么是并发？" class="headerlink" title="什么是并发？"></a>什么是并发？</h2><p>大佬的话作为开篇：<br></p><blockquote><p>两个词很好的说明了并发和并行的区别：<br><br>Parallel Computing：并行计算<br><br>Concurrent programming：并发编程<br></p></blockquote><p>例如你打开浏览器，输入你最爱的P站，拿着薯片看两个人打架的视频，同时你还不忘打开<br>QQ看群里大佬们各种吹水，这就是并发。</p><h2 id="CPU单核与多核"><a href="#CPU单核与多核" class="headerlink" title="CPU单核与多核"></a>CPU单核与多核</h2><p>早期的dos操作系统只支持单个任务的执行，在同一个时刻只有一个进程运行直到该任务执行<br>完成才能执行下一个任务。这个时期的操作系统都只有一个CPU，但这并不是机器的限制，而<br>是操作系统的限制。之后随着操作系统进化，逐渐开始支持多任务执行，比如，unix，linux和windows。这并不是真正意义上的同时执行，而是单个CPU对于每个任务分配了时间片，只要执行的够快就让我们感觉是同时在执行。</p><p><em>单核CPU在同一时间始终只能运行一个进程</em>，只有在CPU多核情况下才能实现真正的并行。如果是2核就<br>能够同时执行2个进程，4核就能够同时执行4个进程</p><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p><a href="https://zh.wikipedia.org/wiki/%E8%A1%8C%E7%A8%8B" target="_blank" rel="noopener">进程</a>：（英语：process），是指计算机中已运行的程序。进程曾经是分时系统的基本运作单位。在面向进程设计的系统（如早期的UNIX，Linux 2.4及更早的版本）中，进程是程序的基本执行实体；在面向线程设计的系统（如当代多数操作系统、Linux 2.6及更新的版本）中，进程本身不是基本运行单位，而是线程的容器。<br></p><p><a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B" target="_blank" rel="noopener">线程</a>：（英语：thread）是操作系统能够进行运算调度的最小单位。大部分情况下，它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。在Unix System V及SunOS中也被称为轻量进程（lightweight processes），但轻量进程更多指内核线程（kernel thread），而把用户线程（user thread）称为线程。<br></p><p>进程是线程的容器，一个进程至少有一个线程。操作系统为进程运行分配所需要的资源例如<br>内存，存储器，文件和IO设备等。线程共享进程分配的资源，同时也会有自己的私有资源。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是并发？&quot;&gt;&lt;a href=&quot;#什么是并发？&quot; class=&quot;headerlink&quot; title=&quot;什么是并发？&quot;&gt;&lt;/a&gt;什么是并发？&lt;/h2&gt;&lt;p&gt;大佬的话作为开篇：&lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;两个词很好的说明了并发和并行的区别：&lt;br&gt;
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://mxzenf123.github.io/index.html/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java并发编程" scheme="https://mxzenf123.github.io/index.html/tags/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>3分钟学会mybatis代码生成器使用</title>
    <link href="https://mxzenf123.github.io/index.html/2021/03/28/3%E5%88%86%E9%92%9F%E5%AD%A6%E4%BC%9Amybatis%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%BD%BF%E7%94%A8/"/>
    <id>https://mxzenf123.github.io/index.html/2021/03/28/3分钟学会mybatis代码生成器使用/</id>
    <published>2021-03-28T09:11:55.566Z</published>
    <updated>2021-04-05T09:22:55.251Z</updated>
    
    <content type="html"><![CDATA[<p>使用mybatis多少都会涉及到操作数据库的sql配置xml文件，数据库对象的model和<br>mapper文件，如果数据库表比较多手撸起来还是费劲。使用mybatis提供的工具自动<br>生成我们使用mybatis过程中需要手写的mapper和model文件：maven的插件方式</p><p>一，引入对mybatis-generator-plugin插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>Generate MyBatis Artifacts<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">goal</span>&gt;</span>generate<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 输出详细信息 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 覆盖生成文件 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/generator-configuration.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>二，编写配置文件generator-configuration.xml，我的如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration PUBLIC</span></span><br><span class="line"><span class="meta">        "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">"数据库驱动包路径"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"dsql"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3DynamicSql"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"数据库驱动包"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"你的数据库链接信息"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"数据库用户名"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"数据库密码"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"org.yangxin.demo1.model"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"org.yangxin.demo1.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"FM01"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件的xml可以参考<a href="http://mybatis.org/generator/configreference/xmlconfig.html" target="_blank" rel="noopener">mybatis官网</a>。上面的xml主要配置三个信息：</p><ol><li>需要连接的数据库的驱动包位置以及对应的链接信息</li><li>生成mapper和model的包名称</li><li>数据库表</li></ol><p>三，运行mybatis-generator-plugin插件：mvn mybatis-generator:generate，运行后<br>会生成对应的mapper和model</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用mybatis多少都会涉及到操作数据库的sql配置xml文件，数据库对象的model和&lt;br&gt;mapper文件，如果数据库表比较多手撸起来还是费劲。使用mybatis提供的工具自动&lt;br&gt;生成我们使用mybatis过程中需要手写的mapper和model文件：maven
      
    
    </summary>
    
    
      <category term="mybatis" scheme="https://mxzenf123.github.io/index.html/categories/mybatis/"/>
    
    
      <category term="mybatis代码生成器" scheme="https://mxzenf123.github.io/index.html/tags/mybatis%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>一文精通mybatis拦截器</title>
    <link href="https://mxzenf123.github.io/index.html/2021/03/14/%E4%B8%80%E6%96%87%E7%B2%BE%E9%80%9Amybatis%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>https://mxzenf123.github.io/index.html/2021/03/14/一文精通mybatis拦截器/</id>
    <published>2021-03-14T06:19:06.125Z</published>
    <updated>2021-03-14T07:26:27.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mybatis插件介绍"><a href="#mybatis插件介绍" class="headerlink" title="mybatis插件介绍"></a>mybatis插件介绍</h2><p>引用<a href="https://mybatis.org/mybatis-3/zh/configuration.html#plugins" target="_blank" rel="noopener">Mybatis官网</a>：</p><blockquote><p>MyBatis 允许你在映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：<br></p></blockquote><ol><li>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)<br></li><li>ParameterHandler (getParameterObject, setParameters)<br></li><li>ResultSetHandler (handleResultSets, handleOutputParameters)<br></li><li>StatementHandler (prepare, parameterize, batch, update, query)<br><br>这些类中方法的细节可以通过查看每个方法的签名来发现，或者直接查看 MyBatis 发行包中的源代码。 如果你想做的不仅仅是监控方法的调用，<br>那么你最好相当了解要重写的方法的行为。 因为在试图修改或重写已有方法的行为时，很可能会破坏 MyBatis 的核心模块。<br>这些都是更底层的类和方法，所以使用插件的时候要特别当心。</li></ol><p>来看一组例子，通过对Executor接口拦截对query方法输出执行sql的日志信息<br>LogInteceptor实现，继承Inteceptor接口，实现该接口的三个方法：intecept，plugin和setProperties方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Intercepts</span>(&#123;<span class="meta">@Signature</span>(type= Executor.class, method = <span class="string">"query"</span>, args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;)&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogPlugin</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(LogPlugin.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object[] objects = invocation.getArgs();</span><br><span class="line">        MappedStatement ms = (MappedStatement)objects[<span class="number">0</span>];</span><br><span class="line">        log.debug(<span class="string">"执行sql -&gt; "</span> + ms.getBoundSql(<span class="keyword">null</span>).getSql());</span><br><span class="line">        log.debug(<span class="string">"参数 -&gt; "</span> + objects[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target,<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MapperConfig.xml和mapper1.xml配置文件，在config文件中引入自定义的拦截器报名<br>加类型的全路径</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugins&gt;</span><br><span class="line">    &lt;plugin interceptor=<span class="string">"org.apache.ibatis.plugin.LogPlugin"</span>&gt;</span><br><span class="line">    &lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=<span class="string">"org.yangxin.mapper1"</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;select id=<span class="string">"getBlog"</span> parameterType=<span class="string">"int"</span> resultType=<span class="string">"map"</span> &gt;</span><br><span class="line">  select * from blog where id = #&#123;id&#125;</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log_plugin_test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    sqlMapper.openSession().selectList(<span class="string">"org.yangxin.mapper1.getBlog"</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>//执行后console输出<br>DEBUG [main] - Logging initialized using ‘class org.apache.ibatis.logging.slf4j.Slf4jImpl’ adapter.<br><br>DEBUG [main] - <strong>执行sql -&gt; select * from blog where id = ?</strong><br><br>DEBUG [main] - <strong>参数 -&gt; 1</strong><br><br>DEBUG [main] - Opening JDBC Connection<br><br>DEBUG [main] - Setting autocommit to false on JDBC Connection [org.apache.derby.impl.jdbc.EmbedConnection@398457879 (XID = 38372), (SESSIONID = 5), (DATABASE = ibderby), (DRDAID = null) ]<br><br>DEBUG [main] - ==&gt; Preparing: select * from blog where id = ?<br><br>DEBUG [main] - ==&gt; Parameters: 1(Integer)<br><br>DEBUG [main] - &lt;== Total: 1<br><br>可以看到加粗部分输入了我们打印的执行sql语句信息</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="解析xml拦截器"><a href="#解析xml拦截器" class="headerlink" title="解析xml拦截器"></a>解析xml拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1，解析config.xml中的plugins节点</span></span><br><span class="line">pluginElement(root.evalNode(<span class="string">"plugins"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//2，将拦截器加入Configuration类</span></span><br><span class="line">configuration.addInterceptor(interceptorInstance);</span><br><span class="line">interceptorChain.addInterceptor(interceptor);</span><br></pre></td></tr></table></figure><p>现在我们通过xml配置的拦截器已经在Mybatis全局配置变量inteceptorChain中了</p><h3 id="生成拦截对象的代理"><a href="#生成拦截对象的代理" class="headerlink" title="生成拦截对象的代理"></a>生成拦截对象的代理</h3><p>当我们打开sqlsession的时候，会调用Configuration对象来创建一个具体执行<br>sql的Excecutor类。创建这个类的时候就会生成拦截了Executor接口的代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1，创建Executor</span></span><br><span class="line"><span class="keyword">final</span> Executor executor = configuration.newExecutor(tx, execType);</span><br><span class="line"><span class="comment">//2，生成代理对象</span></span><br><span class="line">executor = (Executor) interceptorChain.pluginAll(executor);</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">pluginAll</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Interceptor interceptor : interceptors) &#123;</span><br><span class="line">      target = interceptor.plugin(target);g</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里最重要的就是mybatis的plugin包下面的Plugin类了，该类有下面两个用途:<br></p><ol><li>生成jdk代理并实现了InvocationHandler接口<br></li><li>解析实现接口Inteceptor类的注解用于生成代理和拦截对应签名的方法<br></li></ol><p>结合源码回过后来再看一下demo发现mybatis拦截器设计很简单和巧妙，也很方便对<br>mybatis各接口功能进行拓展</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mybatis插件介绍&quot;&gt;&lt;a href=&quot;#mybatis插件介绍&quot; class=&quot;headerlink&quot; title=&quot;mybatis插件介绍&quot;&gt;&lt;/a&gt;mybatis插件介绍&lt;/h2&gt;&lt;p&gt;引用&lt;a href=&quot;https://mybatis.org/myb
      
    
    </summary>
    
    
      <category term="mybatis" scheme="https://mxzenf123.github.io/index.html/categories/mybatis/"/>
    
    
      <category term="mybatis拦截器" scheme="https://mxzenf123.github.io/index.html/tags/mybatis%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>mybatis二级缓存入门到精通</title>
    <link href="https://mxzenf123.github.io/index.html/2021/03/06/mybatis%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
    <id>https://mxzenf123.github.io/index.html/2021/03/06/mybatis二级缓存入门到精通/</id>
    <published>2021-03-06T08:59:50.514Z</published>
    <updated>2021-03-06T10:03:33.072Z</updated>
    
    <content type="html"><![CDATA[<p>一级缓存是session级别的，缓存在一个session内部有效，如果要多个session共享缓存就需要开启二级缓存<br>二级缓存是namespace级别的，不同的namespace不能够共享缓存</p><h3 id="入门demo"><a href="#入门demo" class="headerlink" title="入门demo"></a>入门demo</h3><p>开启二级缓存配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;setting name=<span class="string">"cacheEnabled"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">  &lt;/settings&gt;</span><br></pre></td></tr></table></figure><p>开启后executor会以代理模式创建，统一由CachingExecutor代理。mapper代理配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;cache eviction=<span class="string">"FIFO"</span> size=<span class="string">"1024"</span> flushInterval=<span class="string">"6000"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"getBlog"</span> parameterType=<span class="string">"string"</span> resultType=<span class="string">"map"</span> useCache=<span class="string">"true"</span>&gt;</span><br><span class="line">  select * from blog where id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>现在来测试一下，两个不同的session是否共享了缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SqlSession sqlSession1 = ssf.openSession();</span><br><span class="line">SqlSession sqlSession2 = ssf.openSession();</span><br><span class="line"><span class="comment">//两个不同的session</span></span><br><span class="line">Assert.assertNotEquals(sqlSession1,sqlSession2);</span><br><span class="line">sqlSession1.selectOne(<span class="string">"org.yangxin.mapper1.getBlog"</span>,<span class="string">"1"</span>);</span><br><span class="line">sqlSession1.commit();</span><br><span class="line">sqlSession2.selectOne(<span class="string">"org.yangxin.mapper1.getBlog"</span>,<span class="string">"1"</span>);</span><br></pre></td></tr></table></figure><p>日志输出结果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [main] - Cache Hit Ratio [org.yangxin.mapper1]: <span class="number">0.0</span></span><br><span class="line">DEBUG [main] - Opening JDBC Connection</span><br><span class="line">DEBUG [main] - Setting autocommit to <span class="keyword">false</span> on JDBC Connection [org.apache.derby.impl.jdbc.EmbedConnection@<span class="number">1530446316</span> (XID = <span class="number">37309</span>), (SESSIONID = <span class="number">5</span>), (DATABASE = ibderby), (DRDAID = <span class="keyword">null</span>) ]</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: select * from blog where id = ? </span><br><span class="line">DEBUG [main] - ==&gt; Parameters: <span class="number">1</span>(String)</span><br><span class="line">DEBUG [main] - &lt;==      Total: <span class="number">1</span></span><br><span class="line">DEBUG [main] - Cache Hit Ratio [org.yangxin.mapper1]: <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>可以发现session2在并没有查询数据库来获取结果，实际就是访问的缓存。我们也可以配置mapperstatment中<br>的select关闭缓存，只需将useCache改为false，默认为true</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getBlog"</span> parameterType=<span class="string">"string"</span> resultType=<span class="string">"map"</span> useCache=<span class="string">"false"</span>&gt;</span><br><span class="line">  select * from blog where id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>运行代码查看控制台输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [main] - Opening JDBC Connection</span><br><span class="line">DEBUG [main] - Setting autocommit to <span class="keyword">false</span> on JDBC Connection [org.apache.derby.impl.jdbc.EmbedConnection@<span class="number">1222768327</span> (XID = <span class="number">37411</span>), (SESSIONID = <span class="number">5</span>), (DATABASE = ibderby), (DRDAID = <span class="keyword">null</span>) ]</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: select * from blog where id = ? </span><br><span class="line">DEBUG [main] - ==&gt; Parameters: <span class="number">1</span>(String)</span><br><span class="line">DEBUG [main] - &lt;==      Total: <span class="number">1</span></span><br><span class="line">DEBUG [main] - Opening JDBC Connection</span><br><span class="line">DEBUG [main] - Setting autocommit to <span class="keyword">false</span> on JDBC Connection [org.apache.derby.impl.jdbc.EmbedConnection@<span class="number">220454978</span> (XID = <span class="number">37415</span>), (SESSIONID = <span class="number">7</span>), (DATABASE = ibderby), (DRDAID = <span class="keyword">null</span>) ]</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: select * from blog where id = ? </span><br><span class="line">DEBUG [main] - ==&gt; Parameters: <span class="number">1</span>(String)</span><br><span class="line">DEBUG [main] - &lt;==      Total: <span class="number">1</span></span><br></pre></td></tr></table></figure><p>关闭缓存后，我们看到控制台日志输出了两次通过Jdbc连接查询数据。遗留问题，update，delete，commit和rollback<br>对二级缓存有什么影响，通过下面的源码分析我相信可以找到答案</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>mybatis只有配置了cacheEnabled为true的时候才会生效二级缓存，这样所有的executor才能够被CachingExecutor代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (cacheEnabled) &#123;</span><br><span class="line">    executor = <span class="keyword">new</span> CachingExecutor(executor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CachingExecutor代理了所有executor方法，因为在执行各种ddl语句的时候会对二级缓存产生影响，其中主要管理二级<br>缓存的类是TransactionalCacheManager</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionalCacheManager</span> </span>&#123;</span><br><span class="line">  <span class="comment">//管理所有实现的Cache</span></span><br><span class="line">  <span class="keyword">private</span> Map&lt;Cache, TransactionalCache&gt; transactionalCaches = <span class="keyword">new</span> HashMap&lt;Cache, TransactionalCache&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">(Cache cache)</span> </span>&#123;</span><br><span class="line">    getTransactionalCache(cache).clear();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(Cache cache, CacheKey key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getTransactionalCache(cache).getObject(key);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Cache cache, CacheKey key, Object value)</span> </span>&#123;</span><br><span class="line">    getTransactionalCache(cache).putObject(key, value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//将本地缓存调用Cache的put方法使缓存生效</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (TransactionalCache txCache : transactionalCaches.values()) &#123;</span><br><span class="line">      txCache.commit();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//将所有未提交的缓存清空，将获取的缓存数据从缓存中移除</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (TransactionalCache txCache : transactionalCaches.values()) &#123;</span><br><span class="line">      txCache.rollback();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> TransactionalCache <span class="title">getTransactionalCache</span><span class="params">(Cache cache)</span> </span>&#123;</span><br><span class="line">    TransactionalCache txCache = transactionalCaches.get(cache);</span><br><span class="line">    <span class="keyword">if</span> (txCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">      txCache = <span class="keyword">new</span> TransactionalCache(cache);</span><br><span class="line">      transactionalCaches.put(cache, txCache);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> txCache;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TransactionalCache又是代理类，将所实现的cache代理。executor执行影响缓存发放的时候<br>都是由这个类去做相应的实现</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一级缓存是session级别的，缓存在一个session内部有效，如果要多个session共享缓存就需要开启二级缓存&lt;br&gt;二级缓存是namespace级别的，不同的namespace不能够共享缓存&lt;/p&gt;&lt;h3 id=&quot;入门demo&quot;&gt;&lt;a href=&quot;#入门demo&quot; 
      
    
    </summary>
    
    
      <category term="mybatis" scheme="https://mxzenf123.github.io/index.html/categories/mybatis/"/>
    
    
      <category term="mybatis缓存" scheme="https://mxzenf123.github.io/index.html/tags/mybatis%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>java spi入门及原理分析</title>
    <link href="https://mxzenf123.github.io/index.html/2021/01/12/spi%E5%85%A5%E9%97%A8/"/>
    <id>https://mxzenf123.github.io/index.html/2021/01/12/spi入门/</id>
    <published>2021-01-12T11:14:27.890Z</published>
    <updated>2021-03-06T10:36:03.618Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>维基百科解释<a href="https://en.wikipedia.org/wiki/Service_provider_interface" target="_blank" rel="noopener">查看wiki</a>。<br>spi全称Service privoder Interface，是java的第三方扩展机制。其中：<br>数据库，jndi，声音服务，文件IO和图片IO都有应用</p><h2 id="代码demo"><a href="#代码demo" class="headerlink" title="代码demo"></a>代码demo</h2><p>先从简单的”hello world”开始来直观感受一下spi</p><h3 id="创建接口和实现该接口"><a href="#创建接口和实现该接口" class="headerlink" title="创建接口和实现该接口"></a>创建接口和实现该接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 创建接口 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IHelloWorld</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">(String name)</span></span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *实现类</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldImpl</span> <span class="keyword">implements</span> <span class="title">IHelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"hello,"</span> + name);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>在resources文件夹下新建META-INF/service，以接口IHelloWorld类全路径未文件命名:</p><p><img src="/images/1.png" alt="图片加载失败" title="配置截图"></p><p>文件内容为实现类HelloWorldImpl的全路径名称</p><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//输出 hello world</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">spi_test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServiceLoader&lt;IHelloWorld&gt; hs =</span><br><span class="line">            ServiceLoader.load(IHelloWorld.class,Thread.currentThread().getContextClassLoader());</span><br><span class="line">    <span class="keyword">for</span> (IHelloWorld helloWorld : hs) &#123;</span><br><span class="line">        helloWorld.say(<span class="string">"world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>查看ServiceLoader源码，其中主要有两个问题需要带着去阅读，解决了基本就明白了原理<br>1，为什么要按照META-INI/service，接口文件名和实现类内容创建文件<br>2，如何加载实现类<br>直接上关键代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *PREFIX = "META-INF/services/"</span></span><br><span class="line"><span class="comment"> *这段代码就解释了第一个问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String fullName = PREFIX + service.getName();</span><br><span class="line"><span class="keyword">if</span> (loader == <span class="keyword">null</span>)</span><br><span class="line">  configs = ClassLoader.getSystemResources(fullName);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  configs = loader.getResources(fullName);</span><br></pre></td></tr></table></figure><p>我在jdk1.8中查看源码，inputstream都实现了AutoCloseable，但是大佬们在解析接口命名的文件<br>的时候没有使用try with resources方式，大佬们也有偷懒的时候啊</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    in = u.openStream();</span><br><span class="line">    r = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in, <span class="string">"utf-8"</span>));</span><br><span class="line">    <span class="keyword">int</span> lc = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> ((lc = parseLine(service, u, r, lc, names)) &gt;= <span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException x) &#123;</span><br><span class="line">    fail(service, <span class="string">"Error reading configuration file"</span>, x);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (r != <span class="keyword">null</span>) r.close();</span><br><span class="line">        <span class="keyword">if</span> (in != <span class="keyword">null</span>) in.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException y) &#123;</span><br><span class="line">        fail(service, <span class="string">"Error closing configuration file"</span>, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个问题就是大家在熟悉不过的使用Class.forName在加载配置文件中的实现类了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  c = Class.forName(cn, <span class="keyword">false</span>, loader);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException x) &#123;</span><br><span class="line">    fail(service,<span class="string">"Provider "</span> + cn + <span class="string">" not found"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此spi就算入门了，查看了一下ojdbc.jar包，验证了确实也是以spi的方式提供的，有兴趣的朋友可<br>以再验证一下文章开头所说的服务提供商是否也是spi实现的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;维基百科解释&lt;a href=&quot;https://en.wikipedia.org/wiki/Service_provider_interfac
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://mxzenf123.github.io/index.html/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="spi" scheme="https://mxzenf123.github.io/index.html/tags/spi/"/>
    
      <category term="java" scheme="https://mxzenf123.github.io/index.html/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>mybatis分页原理</title>
    <link href="https://mxzenf123.github.io/index.html/2019/12/21/mybatis%E5%88%86%E9%A1%B5%E5%8E%9F%E7%90%86/"/>
    <id>https://mxzenf123.github.io/index.html/2019/12/21/mybatis分页原理/</id>
    <published>2019-12-21T03:27:39.054Z</published>
    <updated>2019-12-21T03:51:50.181Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mybatis分页原理"><a href="#mybatis分页原理" class="headerlink" title="mybatis分页原理"></a>mybatis分页原理</h3><p>在通过session查询数据的时候，根据传入的数据结构RowBounds来进行查询数据库结果集的skip和limit操作达到分页的目的</p><h3 id="mybatis分页相关代码"><a href="#mybatis分页相关代码" class="headerlink" title="mybatis分页相关代码"></a>mybatis分页相关代码</h3><h4 id="RowBounds类"><a href="#RowBounds类" class="headerlink" title="RowBounds类"></a>RowBounds类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RowBounds</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NO_ROW_OFFSET = <span class="number">0</span>;<span class="comment">//默认</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NO_ROW_LIMIT = Integer.MAX_VALUE;<span class="comment">//默认</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RowBounds DEFAULT = <span class="keyword">new</span> RowBounds();<span class="comment">//默认</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> offset;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> limit;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RowBounds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.offset = NO_ROW_OFFSET;</span><br><span class="line">    <span class="keyword">this</span>.limit = NO_ROW_LIMIT;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RowBounds</span><span class="params">(<span class="keyword">int</span> offset, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.offset = offset;</span><br><span class="line">    <span class="keyword">this</span>.limit = limit;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOffset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> offset;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLimit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> limit;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出RowBounds类还是比较简单，offset和limit只有这两个成员属性，Mybatis分页主要也是根据这两个属性</p><hr><h4 id="DefaultSqlSession根据RowBounds类进行分页查询"><a href="#DefaultSqlSession根据RowBounds类进行分页查询" class="headerlink" title="DefaultSqlSession根据RowBounds类进行分页查询"></a>DefaultSqlSession根据RowBounds类进行分页查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.selectList(statement, parameter, RowBounds.DEFAULT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter, RowBounds rowBounds)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      MappedStatement ms = configuration.getMappedStatement(statement);</span><br><span class="line">      <span class="keyword">return</span> executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">"Error querying database.  Cause: "</span> + e, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      ErrorContext.instance().reset();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不传入RowBounds那么使用默认的，offset从0开始，limit为Integer最大值</p><hr><h4 id="DefaultResultSetHandler根据RowBounds进行返回结果集处理"><a href="#DefaultResultSetHandler根据RowBounds进行返回结果集处理" class="headerlink" title="DefaultResultSetHandler根据RowBounds进行返回结果集处理"></a>DefaultResultSetHandler根据RowBounds进行返回结果集处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleRowValuesForSimpleResultMap</span><span class="params">(ResultSetWrapper rsw, ResultMap resultMap, ResultHandler&lt;?&gt; resultHandler, RowBounds rowBounds, ResultMapping parentMapping)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    DefaultResultContext&lt;Object&gt; resultContext = <span class="keyword">new</span> DefaultResultContext&lt;Object&gt;();</span><br><span class="line">    skipRows(rsw.getResultSet(), rowBounds);<span class="comment">//1</span></span><br><span class="line">    <span class="keyword">while</span> (shouldProcessMoreRows(resultContext, rowBounds)<span class="comment">/*2*/</span> &amp;&amp; rsw.getResultSet().next()) &#123;</span><br><span class="line">      ResultMap discriminatedResultMap = resolveDiscriminatedResultMap(rsw.getResultSet(), resultMap, <span class="keyword">null</span>);</span><br><span class="line">      Object rowValue = getRowValue(rsw, discriminatedResultMap);</span><br><span class="line">      storeObject(resultHandler, resultContext, rowValue, parentMapping, rsw.getResultSet());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1，根据offset跳过结果集到指定行数<br>2，根据limit获取指定数量的结果集</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>mybatis自带分页实现较为简单，将所有结果查询出来，然后取固定某段结果。明显的缺点就是需要将结果全部查询出去，如果进行分页需要手动的去计算指定offset和limit，使用不是很方便。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;mybatis分页原理&quot;&gt;&lt;a href=&quot;#mybatis分页原理&quot; class=&quot;headerlink&quot; title=&quot;mybatis分页原理&quot;&gt;&lt;/a&gt;mybatis分页原理&lt;/h3&gt;&lt;p&gt;在通过session查询数据的时候，根据传入的数据结构RowBoun
      
    
    </summary>
    
    
      <category term="mybatis" scheme="https://mxzenf123.github.io/index.html/categories/mybatis/"/>
    
    
      <category term="mybatis分页" scheme="https://mxzenf123.github.io/index.html/tags/mybatis%E5%88%86%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>mybatis一级缓存源码分析</title>
    <link href="https://mxzenf123.github.io/index.html/2019/12/14/mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98/"/>
    <id>https://mxzenf123.github.io/index.html/2019/12/14/mybatis一级缓存/</id>
    <published>2019-12-14T09:26:53.389Z</published>
    <updated>2019-12-14T09:47:53.349Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>mybatis的一级缓存是session级别默认开启的，如果使用不当不了解其原理会造成一些隐患。<br>session在执行查询的时候委托给executor，一级缓存为起一个map结构的localCache变量实现。<br>主要代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取缓存数据根据cacheKey，cacheKey数据结构感兴趣可以阅读源码</span></span><br><span class="line">list = resultHandler == <span class="keyword">null</span> ? (List&lt;E&gt;) localCache.getObject(key) : <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (list != <span class="keyword">null</span>) &#123;</span><br><span class="line">  handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//没取到就查询数据库</span></span><br><span class="line">  list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在queryFormDatabase方法中会put操作localCache将结果缓存。但是如果配置了参数localCacheScop为statement级别那么不会进行缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) &#123;</span><br><span class="line">  <span class="comment">// 清空localCache</span></span><br><span class="line">  clearLocalCache();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p>如果对于同一个命名空间select的id相同，不同session可能会存在脏读</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启两个session</span></span><br><span class="line"><span class="comment">//涉及的测试环境在mybatis源码中可以找到</span></span><br><span class="line">SqlSession session1 = sqlMapper.openSession();</span><br><span class="line">SqlSession session2 = sqlMapper.openSession();</span><br><span class="line">Blog blog1 = session1.selectOne(<span class="string">"org.apache.ibatis.domain.blog.mappers.NestedBlogMapper.selectBlogJoinedWithPostsAndAuthor"</span>, <span class="number">1</span>);</span><br><span class="line">Blog blog2 = session2.selectOne(<span class="string">"org.apache.ibatis.domain.blog.mappers.NestedBlogMapper.selectBlogJoinedWithPostsAndAuthor"</span>, <span class="number">1</span>);</span><br><span class="line">assertEquals(<span class="string">"Jim Business"</span>, blog1.getTitle());</span><br><span class="line">assertEquals(<span class="string">"Jim Business"</span>, blog2.getTitle());</span><br><span class="line">session1.update(<span class="string">"org.apache.ibatis.domain.blog.mappers.NestedBlogMapper.upBlogId"</span>, <span class="number">1</span>);</span><br><span class="line">session1.commit();</span><br><span class="line">Blog blog3 = session1.selectOne(<span class="string">"org.apache.ibatis.domain.blog.mappers.NestedBlogMapper.selectBlogJoinedWithPostsAndAuthor"</span>, <span class="number">1</span>);</span><br><span class="line">Blog blog4 = session2.selectOne(<span class="string">"org.apache.ibatis.domain.blog.mappers.NestedBlogMapper.selectBlogJoinedWithPostsAndAuthor"</span>, <span class="number">1</span>);</span><br><span class="line">assertEquals(<span class="string">"new title"</span>, blog4.getTitle());<span class="comment">//失败 false</span></span><br><span class="line">assertEquals(<span class="string">"new title"</span>, blog3.getTitle());<span class="comment">//成功 true</span></span><br></pre></td></tr></table></figure><p>上面代码实际上会测试失败，因为产生了脏读。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码分析&quot;&gt;&lt;a href=&quot;#源码分析&quot; class=&quot;headerlink&quot; title=&quot;源码分析&quot;&gt;&lt;/a&gt;源码分析&lt;/h3&gt;&lt;p&gt;mybatis的一级缓存是session级别默认开启的，如果使用不当不了解其原理会造成一些隐患。&lt;br&gt;session在执行
      
    
    </summary>
    
    
      <category term="mybatis" scheme="https://mxzenf123.github.io/index.html/categories/mybatis/"/>
    
    
      <category term="mybatis缓存" scheme="https://mxzenf123.github.io/index.html/tags/mybatis%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
</feed>
