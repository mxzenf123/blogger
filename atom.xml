<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的生活记录</title>
  
  <subtitle>今晚打老虎</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://870314.com/"/>
  <updated>2019-11-02T09:08:39.759Z</updated>
  <id>http://870314.com/</id>
  
  <author>
    <name>杨欣</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Integer的缓存机制</title>
    <link href="http://870314.com/2019/11/02/Integer%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E7%BC%93%E5%AD%98/"/>
    <id>http://870314.com/2019/11/02/Integer自动装箱缓存/</id>
    <published>2019-11-02T09:03:40.988Z</published>
    <updated>2019-11-02T09:08:39.759Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaIntegerCache</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... strings)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Integer integer1 = <span class="number">3</span>;</span><br><span class="line">        Integer integer2 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (integer1 == integer2)</span><br><span class="line">            System.out.println(<span class="string">"integer1 == integer2"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">"integer1 != integer2"</span>);</span><br><span class="line"></span><br><span class="line">        Integer integer3 = <span class="number">300</span>;</span><br><span class="line">        Integer integer4 = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (integer3 == integer4)</span><br><span class="line">            System.out.println(<span class="string">"integer3 == integer4"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">"integer3 != integer4"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于Integer是对象，两个对象比较，我们普遍的认为上面的两个结果都是false<br>然后结果却会让你大跌眼镜。</p><p>上面这段代码真正的输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">integer1 == integer2</span><br><span class="line">integer3 != integer4</span><br></pre></td></tr></table></figure><p>原因就在于java5.0以后对于基本类型自动装箱的在范围-127到128之间会进行自动<br>缓存以提升程序性能</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="java基础" scheme="http://870314.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java自动装箱" scheme="http://870314.com/tags/java%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1/"/>
    
      <category term="java缓存" scheme="http://870314.com/tags/java%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>mybatis动态sql之组合模式</title>
    <link href="http://870314.com/2019/11/02/mybatis%E5%8A%A8%E6%80%81sql%E5%AE%9E%E7%8E%B0%E4%B9%8B%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>http://870314.com/2019/11/02/mybatis动态sql实现之组合模式/</id>
    <published>2019-11-02T07:19:56.648Z</published>
    <updated>2019-11-02T08:33:48.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组合设计模式"><a href="#组合设计模式" class="headerlink" title="组合设计模式"></a>组合设计模式</h2><p>组合设计模式是一种整体与部分的树形层次关系结构。组合对象中各个对象具有<br>相同的行为模式，这样就能处理简单对象一样处理复杂对象。复杂对象的底层细节<br>将会被屏蔽掉，与客户端解耦，最重要的是和简单对象一样实现了同一个接口</p><h2 id="mybatis动态sql"><a href="#mybatis动态sql" class="headerlink" title="mybatis动态sql"></a>mybatis动态sql</h2><h3 id="实现同一个接口"><a href="#实现同一个接口" class="headerlink" title="实现同一个接口"></a>实现同一个接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SqlNode</span> </span>&#123;</span><br><span class="line">  <span class="comment">//共同的行为</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(DynamicContext context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂对象"><a href="#复杂对象" class="headerlink" title="复杂对象"></a>复杂对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//混合sqlnode节点，组合不同类型的sqlnode</span></span><br><span class="line"> <span class="comment">//其他node有：trim,set,where,if,otherwise</span></span><br><span class="line"> <span class="comment">//choose</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MixedSqlNode</span> <span class="keyword">implements</span> <span class="title">SqlNode</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> List&lt;SqlNode&gt; contents;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MixedSqlNode</span><span class="params">(List&lt;SqlNode&gt; contents)</span></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.contents = contents;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(DynamicContext context)</span></span>&#123;</span><br><span class="line">  contents.forEach(node -&gt; node.apply(context));</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="简单对象"><a href="#简单对象" class="headerlink" title="简单对象"></a>简单对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//if sqlnode实现了接口sqlnode的apply方法，</span></span><br><span class="line"><span class="comment">//定义了自己的行为只有当test表达式为真的时候</span></span><br><span class="line"><span class="comment">//才会将节点内容增加到动态上下文的sql拼接中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfSqlNode</span> <span class="keyword">implements</span> <span class="title">SqlNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ExpressionEvaluator evaluator;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String test;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> SqlNode contents;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">IfSqlNode</span><span class="params">(SqlNode contents, String test)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.test = test;</span><br><span class="line">    <span class="keyword">this</span>.contents = contents;</span><br><span class="line">    <span class="keyword">this</span>.evaluator = <span class="keyword">new</span> ExpressionEvaluator();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(DynamicContext context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (evaluator.evaluateBoolean(test, context.getBindings())) &#123;</span><br><span class="line">      contents.apply(context);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mybatis一组复杂sql在xml文件中的配置"><a href="#mybatis一组复杂sql在xml文件中的配置" class="headerlink" title="mybatis一组复杂sql在xml文件中的配置"></a>mybatis一组复杂sql在xml文件中的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  trim节点作为根节点，下面有三个if子节点，在Mybatis中组织成</span></span><br><span class="line"><span class="comment">  一个根节点MixedNode节点下两个trim节点和where节点;trim节点</span></span><br><span class="line"><span class="comment">  下一个MixedNode节点，由三个if节点组成;where节点实际上的trim</span></span><br><span class="line"><span class="comment">  节点的另一种实现，原理一样</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"org.format.dynamicproxy.mybatis.bean.User"</span>&gt;</span></span><br><span class="line">   UPDATE users</span><br><span class="line">   <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"SET"</span> <span class="attr">prefixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null and name != ''"</span>&gt;</span></span><br><span class="line">           name = #&#123;name&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age != null and age != ''"</span>&gt;</span></span><br><span class="line">           , age = #&#123;age&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"birthday != null and birthday != ''"</span>&gt;</span></span><br><span class="line">           , birthday = #&#123;birthday&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">where</span>&gt;</span> 1=1</span><br><span class="line">     <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id != null"</span>&gt;</span></span><br><span class="line">   and id = $&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>组合模式对于具有层次关系多个对象能够很好的表达，但是比较抽象<br>不容易掌控。提高了软件设计困难同时屏蔽了对象复杂性，客户端使用<br>变得简单</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;组合设计模式&quot;&gt;&lt;a href=&quot;#组合设计模式&quot; class=&quot;headerlink&quot; title=&quot;组合设计模式&quot;&gt;&lt;/a&gt;组合设计模式&lt;/h2&gt;&lt;p&gt;组合设计模式是一种整体与部分的树形层次关系结构。组合对象中各个对象具有&lt;br&gt;相同的行为模式，这样就能处理简
      
    
    </summary>
    
    
      <category term="框架工具" scheme="http://870314.com/categories/%E6%A1%86%E6%9E%B6%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="mybatis动态sql" scheme="http://870314.com/tags/mybatis%E5%8A%A8%E6%80%81sql/"/>
    
      <category term="组合设计模式" scheme="http://870314.com/tags/%E7%BB%84%E5%90%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>spring IoC和容器问题整理</title>
    <link href="http://870314.com/2019/10/27/springioc%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <id>http://870314.com/2019/10/27/springioc问题整理/</id>
    <published>2019-10-27T06:44:07.570Z</published>
    <updated>2019-10-27T07:41:12.816Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>什么是依赖注入以及有什么好处?</p></li><li><p>什么是接口，在java中使用的好处</p><ul><li>spring bean中为什么推荐使用接口</li></ul></li><li><p>application-context代表什么？</p></li><li><p>你怎么创建一个ApplicationContext实例？</p></li><li><p>描述bean在ApplicationoContext的声明周期</p></li><li><p>最好的关闭ApplicationContext的方式是什么？SpringBoot为我们做了这个吗？</p></li><li><p>能够描述一下下面的问题</p><ul><li>使用java进行依赖注入</li><li>使用注解进行依赖注入</li><li>组件、模块扫描</li><li>bean的scope</li><li>bean是懒加载还是预实例化？你怎么控制这种行为？</li></ul></li><li><p>什么是属性源文件？你怎么使用@PropertySource</p></li><li><p>什么是BeanFactoryPostProcessor，有什么用？它什么时候被调用？</p><ul><li>ProperySourcesPlaceholderConfigurer被用于什么地方？</li></ul></li><li><p>什么是组件扫描？</p></li><li><p>@Autowired注解关于属性、构造器和方法做了什么？</p></li><li><p>如果要向私有属性注入？怎么做到？</p></li><li><p>@Qualifier对@Autowired做了什么补充？</p></li><li><p>什么是对象代理？spring两种创建代理对象的区别？</p><ul><li>代理对象的限制？</li><li>代理对象的功能和弊端？</li></ul></li><li><p>@Bean注解有什么用</p></li><li><p>@Bean注解的Bean的默认id是什么？你如果改变？</p></li><li><p>为什么不允许在final类上使用@Configration注解</p><ul><li>@Configration支持单例bean吗</li><li>为什么@Bean注解的类的方法也不能是final的</li></ul></li><li><p>什么时候配置profile？在哪些场景会有用</p></li><li><p>@Bean和@Profile能够同时使用吗？</p></li><li><p>@Component和@Profile能够一起使用吗？</p></li><li><p>你能够列举多少种profiles？</p></li><li><p>怎么注入集合和k-v类型的数据到bean中？</p></li><li><p>什么是SpringEL表达式？</p></li><li><p>spring enviroment抽象是什么？</p></li><li><p>$和#有什么区别？</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;&lt;li&gt;&lt;p&gt;什么是依赖注入以及有什么好处?&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;什么是接口，在java中使用的好处&lt;/p&gt;&lt;ul&gt;&lt;li&gt;spring bean中为什么推荐使用接口&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;application-context代表什么？&lt;/
      
    
    </summary>
    
    
      <category term="spring" scheme="http://870314.com/categories/spring/"/>
    
    
      <category term="spring IoC" scheme="http://870314.com/tags/spring-IoC/"/>
    
      <category term="spring容器" scheme="http://870314.com/tags/spring%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>intellij常用快捷键</title>
    <link href="http://870314.com/2019/10/13/intellij%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://870314.com/2019/10/13/intellij常用快捷键/</id>
    <published>2019-10-13T07:16:49.815Z</published>
    <updated>2019-10-13T07:19:52.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h2><p>Ctrl+X，删除行</p><p>Ctrl+D，复制行</p><p>Ctrl+Alt+O，优化导入的类和包</p><p>Ctrl+Alt+L，格式化代码</p><p>Ctrl+Shift+F，全局查找，类似Eclipse中的Ctrl+H查找</p><p>Ctrl+H，显示类结构图（类的继承层次）</p><p>Ctrl+F12，可以显示当前文件的结构（structure包括属性和方法）</p><p>Alt+Q，可以看到当前方法的声明</p><p>Ctrl+Q，显示注释文档</p><p>Ctrl+P，可以显示参数信息</p><p>Ctrl+N，可以快速打开类</p><p>Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）</p><p>Ctrl+Alt+B，跳转到方法实现处</p><p>Alt+左箭头，跳转到上次编辑的地方</p><p>Shift+F6，重命名</p><p>Alt+Shift+Up/Down，上/下移一行</p><p>Ctrl+Shift+U，大小写转化</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>F8，步过<br>F7，步入<br>Shift+F7，智能步入<br>Shift+F8，步出<br>Alt+Shift+F8，强制步过<br>Alt+Shift+F7，强制步入<br>Alt+F9，运行至光标处<br>Ctrl+Alt+F9，强制运行至光标处<br>F9，恢复程序</p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>Ctrl+F，查找<br>Ctrl+R，替换<br>Alt+F7，查找用法<br>Ctrl+Alt+F7，显示用法<br>Ctrl+F7，在文件中查找用法r</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常规&quot;&gt;&lt;a href=&quot;#常规&quot; class=&quot;headerlink&quot; title=&quot;常规&quot;&gt;&lt;/a&gt;常规&lt;/h2&gt;&lt;p&gt;Ctrl+X，删除行&lt;/p&gt;&lt;p&gt;Ctrl+D，复制行&lt;/p&gt;&lt;p&gt;Ctrl+Alt+O，优化导入的类和包&lt;/p&gt;&lt;p&gt;Ctrl+Alt+L
      
    
    </summary>
    
    
      <category term="奇淫技巧" scheme="http://870314.com/categories/%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="intellij快捷键" scheme="http://870314.com/tags/intellij%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>apache BeanUtils入门</title>
    <link href="http://870314.com/2019/10/13/apache_beanutils%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    <id>http://870314.com/2019/10/13/apache_beanutils使用入门/</id>
    <published>2019-10-13T05:38:23.494Z</published>
    <updated>2019-10-13T06:46:39.468Z</updated>
    
    <content type="html"><![CDATA[<p>apache项目地址<a href="http://commons.apache.org/proper/commons-beanutils" target="_blank" rel="noopener">site</a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在我们使用java开发过程中，对于操作类的属性一般通过get或者set两个方法，类似于Object.get()/set()。但是有的时候我们可能不能够直接调用这两个方法获取类的属性，也许第一反应是用reflection，这样会自己写太多和业务无关的代码。apache commons包中BeanUtils能够帮助我们解决这个问题。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="引入apache-commons-beanutils包"><a href="#引入apache-commons-beanutils包" class="headerlink" title="引入apache commons-beanutils包"></a>引入apache commons-beanutils包</h3><h3 id="新建类Empolyee"><a href="#新建类Empolyee" class="headerlink" title="新建类Empolyee"></a>新建类Empolyee</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String firstName;</span><br><span class="line">  <span class="keyword">public</span> String lastName;</span><br><span class="line">  <span class="keyword">public</span> String[] tells;</span><br><span class="line">  <span class="keyword">public</span> Map address;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span></span>&#123;</span><br><span class="line">    tells = <span class="keyword">new</span> String[<span class="number">10</span>];</span><br><span class="line">    address = <span class="keyword">new</span> HashMap();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(String firstName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lastName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String[] getTells() &#123;</span><br><span class="line">    <span class="keyword">return</span> tells;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTells</span><span class="params">(String[] tells)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.tells = tells;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Map <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> address;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Map address)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.address = address;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>这篇文章我们主要介绍该工具包中PropertyUtils入门使用</p><h3 id="简单属性"><a href="#简单属性" class="headerlink" title="简单属性"></a>简单属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">PropertyUtils.setSimpleProperty(employee, <span class="string">"firstName"</span>, <span class="string">"欣"</span>);</span><br><span class="line">PropertyUtils.setSimpleProperty(employee, <span class="string">"lastName"</span>, <span class="string">"杨"</span>);</span><br></pre></td></tr></table></figure><h3 id="带索引的属性"><a href="#带索引的属性" class="headerlink" title="带索引的属性"></a>带索引的属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">PropertyUtils.setIndexedProperty(employee, <span class="string">"tells[0]"</span>, <span class="string">"110"</span>);</span><br><span class="line">PropertyUtils.setIndexedProperty(employee, <span class="string">"tells[1]"</span>, <span class="string">"120"</span>);</span><br></pre></td></tr></table></figure><h3 id="key-value属性"><a href="#key-value属性" class="headerlink" title="key-value属性"></a>key-value属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">PropertyUtils.setMappedProperty(employee, <span class="string">"address(province)"</span>, <span class="string">"四川省"</span>);</span><br><span class="line">PropertyUtils.setMappedProperty(employee, <span class="string">"address(city)"</span>, <span class="string">"成都"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;apache项目地址&lt;a href=&quot;http://commons.apache.org/proper/commons-beanutils&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;site&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背
      
    
    </summary>
    
    
      <category term="框架工具" scheme="http://870314.com/categories/%E6%A1%86%E6%9E%B6%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="apache commons" scheme="http://870314.com/tags/apache-commons/"/>
    
      <category term="java" scheme="http://870314.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo搭建个人博客</title>
    <link href="http://870314.com/2019/09/28/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://870314.com/2019/09/28/搭建hexo博客/</id>
    <published>2019-09-28T03:23:49.980Z</published>
    <updated>2019-10-05T13:26:29.070Z</updated>
    
    <content type="html"><![CDATA[<p>Quick start参考官网<a href="https://hexo.io/docs/" target="_blank" rel="noopener">文档</a></p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建博客文件夹"><a href="#创建博客文件夹" class="headerlink" title="创建博客文件夹"></a>创建博客文件夹</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>更多: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">创建</a></p><h3 id="启动本地服务"><a href="#启动本地服务" class="headerlink" title="启动本地服务"></a>启动本地服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>更多: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">服务器</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>更多: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">生成静态文件</a></p><h3 id="发布到远程服务器"><a href="#发布到远程服务器" class="headerlink" title="发布到远程服务器"></a>发布到远程服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>更多: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">发布</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Quick start参考官网&lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文档&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&quot;快速开始&quot;&gt;&lt;a href=&quot;#快速开始&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="奇淫技巧" scheme="http://870314.com/categories/%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="hexo" scheme="http://870314.com/tags/hexo/"/>
    
  </entry>
  
</feed>
