<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>今晚打老虎</title>
  
  <subtitle>今晚打老虎</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mxzenf123.github.io/index.html/"/>
  <updated>2021-03-06T10:03:33.072Z</updated>
  <id>https://mxzenf123.github.io/index.html/</id>
  
  <author>
    <name>杨欣</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mybatis二级缓存入门到精通</title>
    <link href="https://mxzenf123.github.io/index.html/2021/03/06/mybatis%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
    <id>https://mxzenf123.github.io/index.html/2021/03/06/mybatis二级缓存入门到精通/</id>
    <published>2021-03-06T08:59:50.514Z</published>
    <updated>2021-03-06T10:03:33.072Z</updated>
    
    <content type="html"><![CDATA[<p>一级缓存是session级别的，缓存在一个session内部有效，如果要多个session共享缓存就需要开启二级缓存<br>二级缓存是namespace级别的，不同的namespace不能够共享缓存</p><h3 id="入门demo"><a href="#入门demo" class="headerlink" title="入门demo"></a>入门demo</h3><p>开启二级缓存配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;setting name=<span class="string">"cacheEnabled"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">  &lt;/settings&gt;</span><br></pre></td></tr></table></figure><p>开启后executor会以代理模式创建，统一由CachingExecutor代理。mapper代理配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;cache eviction=<span class="string">"FIFO"</span> size=<span class="string">"1024"</span> flushInterval=<span class="string">"6000"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"getBlog"</span> parameterType=<span class="string">"string"</span> resultType=<span class="string">"map"</span> useCache=<span class="string">"true"</span>&gt;</span><br><span class="line">  select * from blog where id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>现在来测试一下，两个不同的session是否共享了缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SqlSession sqlSession1 = ssf.openSession();</span><br><span class="line">SqlSession sqlSession2 = ssf.openSession();</span><br><span class="line"><span class="comment">//两个不同的session</span></span><br><span class="line">Assert.assertNotEquals(sqlSession1,sqlSession2);</span><br><span class="line">sqlSession1.selectOne(<span class="string">"org.yangxin.mapper1.getBlog"</span>,<span class="string">"1"</span>);</span><br><span class="line">sqlSession1.commit();</span><br><span class="line">sqlSession2.selectOne(<span class="string">"org.yangxin.mapper1.getBlog"</span>,<span class="string">"1"</span>);</span><br></pre></td></tr></table></figure><p>日志输出结果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [main] - Cache Hit Ratio [org.yangxin.mapper1]: <span class="number">0.0</span></span><br><span class="line">DEBUG [main] - Opening JDBC Connection</span><br><span class="line">DEBUG [main] - Setting autocommit to <span class="keyword">false</span> on JDBC Connection [org.apache.derby.impl.jdbc.EmbedConnection@<span class="number">1530446316</span> (XID = <span class="number">37309</span>), (SESSIONID = <span class="number">5</span>), (DATABASE = ibderby), (DRDAID = <span class="keyword">null</span>) ]</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: select * from blog where id = ? </span><br><span class="line">DEBUG [main] - ==&gt; Parameters: <span class="number">1</span>(String)</span><br><span class="line">DEBUG [main] - &lt;==      Total: <span class="number">1</span></span><br><span class="line">DEBUG [main] - Cache Hit Ratio [org.yangxin.mapper1]: <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>可以发现session2在并没有查询数据库来获取结果，实际就是访问的缓存。我们也可以配置mapperstatment中<br>的select关闭缓存，只需将useCache改为false，默认为true</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getBlog"</span> parameterType=<span class="string">"string"</span> resultType=<span class="string">"map"</span> useCache=<span class="string">"false"</span>&gt;</span><br><span class="line">  select * from blog where id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>运行代码查看控制台输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [main] - Opening JDBC Connection</span><br><span class="line">DEBUG [main] - Setting autocommit to <span class="keyword">false</span> on JDBC Connection [org.apache.derby.impl.jdbc.EmbedConnection@<span class="number">1222768327</span> (XID = <span class="number">37411</span>), (SESSIONID = <span class="number">5</span>), (DATABASE = ibderby), (DRDAID = <span class="keyword">null</span>) ]</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: select * from blog where id = ? </span><br><span class="line">DEBUG [main] - ==&gt; Parameters: <span class="number">1</span>(String)</span><br><span class="line">DEBUG [main] - &lt;==      Total: <span class="number">1</span></span><br><span class="line">DEBUG [main] - Opening JDBC Connection</span><br><span class="line">DEBUG [main] - Setting autocommit to <span class="keyword">false</span> on JDBC Connection [org.apache.derby.impl.jdbc.EmbedConnection@<span class="number">220454978</span> (XID = <span class="number">37415</span>), (SESSIONID = <span class="number">7</span>), (DATABASE = ibderby), (DRDAID = <span class="keyword">null</span>) ]</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: select * from blog where id = ? </span><br><span class="line">DEBUG [main] - ==&gt; Parameters: <span class="number">1</span>(String)</span><br><span class="line">DEBUG [main] - &lt;==      Total: <span class="number">1</span></span><br></pre></td></tr></table></figure><p>关闭缓存后，我们看到控制台日志输出了两次通过Jdbc连接查询数据。遗留问题，update，delete，commit和rollback<br>对二级缓存有什么影响，通过下面的源码分析我相信可以找到答案</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>mybatis只有配置了cacheEnabled为true的时候才会生效二级缓存，这样所有的executor才能够被CachingExecutor代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (cacheEnabled) &#123;</span><br><span class="line">    executor = <span class="keyword">new</span> CachingExecutor(executor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CachingExecutor代理了所有executor方法，因为在执行各种ddl语句的时候会对二级缓存产生影响，其中主要管理二级<br>缓存的类是TransactionalCacheManager</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionalCacheManager</span> </span>&#123;</span><br><span class="line">  <span class="comment">//管理所有实现的Cache</span></span><br><span class="line">  <span class="keyword">private</span> Map&lt;Cache, TransactionalCache&gt; transactionalCaches = <span class="keyword">new</span> HashMap&lt;Cache, TransactionalCache&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">(Cache cache)</span> </span>&#123;</span><br><span class="line">    getTransactionalCache(cache).clear();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(Cache cache, CacheKey key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getTransactionalCache(cache).getObject(key);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Cache cache, CacheKey key, Object value)</span> </span>&#123;</span><br><span class="line">    getTransactionalCache(cache).putObject(key, value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//将本地缓存调用Cache的put方法使缓存生效</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (TransactionalCache txCache : transactionalCaches.values()) &#123;</span><br><span class="line">      txCache.commit();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//将所有未提交的缓存清空，将获取的缓存数据从缓存中移除</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (TransactionalCache txCache : transactionalCaches.values()) &#123;</span><br><span class="line">      txCache.rollback();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> TransactionalCache <span class="title">getTransactionalCache</span><span class="params">(Cache cache)</span> </span>&#123;</span><br><span class="line">    TransactionalCache txCache = transactionalCaches.get(cache);</span><br><span class="line">    <span class="keyword">if</span> (txCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">      txCache = <span class="keyword">new</span> TransactionalCache(cache);</span><br><span class="line">      transactionalCaches.put(cache, txCache);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> txCache;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TransactionalCache又是代理类，将所实现的cache代理。executor执行影响缓存发放的时候<br>都是由这个类去做相应的实现</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一级缓存是session级别的，缓存在一个session内部有效，如果要多个session共享缓存就需要开启二级缓存&lt;br&gt;二级缓存是namespace级别的，不同的namespace不能够共享缓存&lt;/p&gt;&lt;h3 id=&quot;入门demo&quot;&gt;&lt;a href=&quot;#入门demo&quot; 
      
    
    </summary>
    
    
      <category term="mybatis" scheme="https://mxzenf123.github.io/index.html/categories/mybatis/"/>
    
    
      <category term="mybatis缓存" scheme="https://mxzenf123.github.io/index.html/tags/mybatis%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>java spi入门及原理分析</title>
    <link href="https://mxzenf123.github.io/index.html/2021/01/12/spi%E5%85%A5%E9%97%A8/"/>
    <id>https://mxzenf123.github.io/index.html/2021/01/12/spi入门/</id>
    <published>2021-01-12T11:14:27.890Z</published>
    <updated>2021-03-06T10:36:03.618Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>维基百科解释<a href="https://en.wikipedia.org/wiki/Service_provider_interface" target="_blank" rel="noopener">查看wiki</a>。<br>spi全称Service privoder Interface，是java的第三方扩展机制。其中：<br>数据库，jndi，声音服务，文件IO和图片IO都有应用</p><h2 id="代码demo"><a href="#代码demo" class="headerlink" title="代码demo"></a>代码demo</h2><p>先从简单的”hello world”开始来直观感受一下spi</p><h3 id="创建接口和实现该接口"><a href="#创建接口和实现该接口" class="headerlink" title="创建接口和实现该接口"></a>创建接口和实现该接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 创建接口 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IHelloWorld</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">(String name)</span></span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *实现类</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldImpl</span> <span class="keyword">implements</span> <span class="title">IHelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"hello,"</span> + name);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>在resources文件夹下新建META-INF/service，以接口IHelloWorld类全路径未文件命名:</p><p><img src="/images/1.png" alt="图片加载失败" title="配置截图"></p><p>文件内容为实现类HelloWorldImpl的全路径名称</p><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//输出 hello world</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">spi_test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServiceLoader&lt;IHelloWorld&gt; hs =</span><br><span class="line">            ServiceLoader.load(IHelloWorld.class,Thread.currentThread().getContextClassLoader());</span><br><span class="line">    <span class="keyword">for</span> (IHelloWorld helloWorld : hs) &#123;</span><br><span class="line">        helloWorld.say(<span class="string">"world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>查看ServiceLoader源码，其中主要有两个问题需要带着去阅读，解决了基本就明白了原理<br>1，为什么要按照META-INI/service，接口文件名和实现类内容创建文件<br>2，如何加载实现类<br>直接上关键代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *PREFIX = "META-INF/services/"</span></span><br><span class="line"><span class="comment"> *这段代码就解释了第一个问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String fullName = PREFIX + service.getName();</span><br><span class="line"><span class="keyword">if</span> (loader == <span class="keyword">null</span>)</span><br><span class="line">  configs = ClassLoader.getSystemResources(fullName);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  configs = loader.getResources(fullName);</span><br></pre></td></tr></table></figure><p>我在jdk1.8中查看源码，inputstream都实现了AutoCloseable，但是大佬们在解析接口命名的文件<br>的时候没有使用try with resources方式，大佬们也有偷懒的时候啊</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    in = u.openStream();</span><br><span class="line">    r = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in, <span class="string">"utf-8"</span>));</span><br><span class="line">    <span class="keyword">int</span> lc = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> ((lc = parseLine(service, u, r, lc, names)) &gt;= <span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException x) &#123;</span><br><span class="line">    fail(service, <span class="string">"Error reading configuration file"</span>, x);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (r != <span class="keyword">null</span>) r.close();</span><br><span class="line">        <span class="keyword">if</span> (in != <span class="keyword">null</span>) in.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException y) &#123;</span><br><span class="line">        fail(service, <span class="string">"Error closing configuration file"</span>, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个问题就是大家在熟悉不过的使用Class.forName在加载配置文件中的实现类了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  c = Class.forName(cn, <span class="keyword">false</span>, loader);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException x) &#123;</span><br><span class="line">    fail(service,<span class="string">"Provider "</span> + cn + <span class="string">" not found"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此spi就算入门了，查看了一下ojdbc.jar包，验证了确实也是以spi的方式提供的，有兴趣的朋友可<br>以再验证一下文章开头所说的服务提供商是否也是spi实现的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;维基百科解释&lt;a href=&quot;https://en.wikipedia.org/wiki/Service_provider_interfac
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://mxzenf123.github.io/index.html/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="https://mxzenf123.github.io/index.html/tags/java/"/>
    
      <category term="spi" scheme="https://mxzenf123.github.io/index.html/tags/spi/"/>
    
  </entry>
  
  <entry>
    <title>mybatis分页原理</title>
    <link href="https://mxzenf123.github.io/index.html/2019/12/21/mybatis%E5%88%86%E9%A1%B5%E5%8E%9F%E7%90%86/"/>
    <id>https://mxzenf123.github.io/index.html/2019/12/21/mybatis分页原理/</id>
    <published>2019-12-21T03:27:39.054Z</published>
    <updated>2019-12-21T03:51:50.181Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mybatis分页原理"><a href="#mybatis分页原理" class="headerlink" title="mybatis分页原理"></a>mybatis分页原理</h3><p>在通过session查询数据的时候，根据传入的数据结构RowBounds来进行查询数据库结果集的skip和limit操作达到分页的目的</p><h3 id="mybatis分页相关代码"><a href="#mybatis分页相关代码" class="headerlink" title="mybatis分页相关代码"></a>mybatis分页相关代码</h3><h4 id="RowBounds类"><a href="#RowBounds类" class="headerlink" title="RowBounds类"></a>RowBounds类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RowBounds</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NO_ROW_OFFSET = <span class="number">0</span>;<span class="comment">//默认</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NO_ROW_LIMIT = Integer.MAX_VALUE;<span class="comment">//默认</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RowBounds DEFAULT = <span class="keyword">new</span> RowBounds();<span class="comment">//默认</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> offset;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> limit;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RowBounds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.offset = NO_ROW_OFFSET;</span><br><span class="line">    <span class="keyword">this</span>.limit = NO_ROW_LIMIT;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RowBounds</span><span class="params">(<span class="keyword">int</span> offset, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.offset = offset;</span><br><span class="line">    <span class="keyword">this</span>.limit = limit;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOffset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> offset;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLimit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> limit;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出RowBounds类还是比较简单，offset和limit只有这两个成员属性，Mybatis分页主要也是根据这两个属性</p><hr><h4 id="DefaultSqlSession根据RowBounds类进行分页查询"><a href="#DefaultSqlSession根据RowBounds类进行分页查询" class="headerlink" title="DefaultSqlSession根据RowBounds类进行分页查询"></a>DefaultSqlSession根据RowBounds类进行分页查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.selectList(statement, parameter, RowBounds.DEFAULT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter, RowBounds rowBounds)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      MappedStatement ms = configuration.getMappedStatement(statement);</span><br><span class="line">      <span class="keyword">return</span> executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">"Error querying database.  Cause: "</span> + e, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      ErrorContext.instance().reset();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不传入RowBounds那么使用默认的，offset从0开始，limit为Integer最大值</p><hr><h4 id="DefaultResultSetHandler根据RowBounds进行返回结果集处理"><a href="#DefaultResultSetHandler根据RowBounds进行返回结果集处理" class="headerlink" title="DefaultResultSetHandler根据RowBounds进行返回结果集处理"></a>DefaultResultSetHandler根据RowBounds进行返回结果集处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleRowValuesForSimpleResultMap</span><span class="params">(ResultSetWrapper rsw, ResultMap resultMap, ResultHandler&lt;?&gt; resultHandler, RowBounds rowBounds, ResultMapping parentMapping)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    DefaultResultContext&lt;Object&gt; resultContext = <span class="keyword">new</span> DefaultResultContext&lt;Object&gt;();</span><br><span class="line">    skipRows(rsw.getResultSet(), rowBounds);<span class="comment">//1</span></span><br><span class="line">    <span class="keyword">while</span> (shouldProcessMoreRows(resultContext, rowBounds)<span class="comment">/*2*/</span> &amp;&amp; rsw.getResultSet().next()) &#123;</span><br><span class="line">      ResultMap discriminatedResultMap = resolveDiscriminatedResultMap(rsw.getResultSet(), resultMap, <span class="keyword">null</span>);</span><br><span class="line">      Object rowValue = getRowValue(rsw, discriminatedResultMap);</span><br><span class="line">      storeObject(resultHandler, resultContext, rowValue, parentMapping, rsw.getResultSet());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1，根据offset跳过结果集到指定行数<br>2，根据limit获取指定数量的结果集</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>mybatis自带分页实现较为简单，将所有结果查询出来，然后取固定某段结果。明显的缺点就是需要将结果全部查询出去，如果进行分页需要手动的去计算指定offset和limit，使用不是很方便。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;mybatis分页原理&quot;&gt;&lt;a href=&quot;#mybatis分页原理&quot; class=&quot;headerlink&quot; title=&quot;mybatis分页原理&quot;&gt;&lt;/a&gt;mybatis分页原理&lt;/h3&gt;&lt;p&gt;在通过session查询数据的时候，根据传入的数据结构RowBoun
      
    
    </summary>
    
    
      <category term="mybatis" scheme="https://mxzenf123.github.io/index.html/categories/mybatis/"/>
    
    
      <category term="mybatis分页" scheme="https://mxzenf123.github.io/index.html/tags/mybatis%E5%88%86%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>mybatis一级缓存源码分析</title>
    <link href="https://mxzenf123.github.io/index.html/2019/12/14/mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98/"/>
    <id>https://mxzenf123.github.io/index.html/2019/12/14/mybatis一级缓存/</id>
    <published>2019-12-14T09:26:53.389Z</published>
    <updated>2019-12-14T09:47:53.349Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>mybatis的一级缓存是session级别默认开启的，如果使用不当不了解其原理会造成一些隐患。<br>session在执行查询的时候委托给executor，一级缓存为起一个map结构的localCache变量实现。<br>主要代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取缓存数据根据cacheKey，cacheKey数据结构感兴趣可以阅读源码</span></span><br><span class="line">list = resultHandler == <span class="keyword">null</span> ? (List&lt;E&gt;) localCache.getObject(key) : <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (list != <span class="keyword">null</span>) &#123;</span><br><span class="line">  handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//没取到就查询数据库</span></span><br><span class="line">  list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在queryFormDatabase方法中会put操作localCache将结果缓存。但是如果配置了参数localCacheScop为statement级别那么不会进行缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) &#123;</span><br><span class="line">  <span class="comment">// 清空localCache</span></span><br><span class="line">  clearLocalCache();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p>如果对于同一个命名空间select的id相同，不同session可能会存在脏读</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启两个session</span></span><br><span class="line"><span class="comment">//涉及的测试环境在mybatis源码中可以找到</span></span><br><span class="line">SqlSession session1 = sqlMapper.openSession();</span><br><span class="line">SqlSession session2 = sqlMapper.openSession();</span><br><span class="line">Blog blog1 = session1.selectOne(<span class="string">"org.apache.ibatis.domain.blog.mappers.NestedBlogMapper.selectBlogJoinedWithPostsAndAuthor"</span>, <span class="number">1</span>);</span><br><span class="line">Blog blog2 = session2.selectOne(<span class="string">"org.apache.ibatis.domain.blog.mappers.NestedBlogMapper.selectBlogJoinedWithPostsAndAuthor"</span>, <span class="number">1</span>);</span><br><span class="line">assertEquals(<span class="string">"Jim Business"</span>, blog1.getTitle());</span><br><span class="line">assertEquals(<span class="string">"Jim Business"</span>, blog2.getTitle());</span><br><span class="line">session1.update(<span class="string">"org.apache.ibatis.domain.blog.mappers.NestedBlogMapper.upBlogId"</span>, <span class="number">1</span>);</span><br><span class="line">session1.commit();</span><br><span class="line">Blog blog3 = session1.selectOne(<span class="string">"org.apache.ibatis.domain.blog.mappers.NestedBlogMapper.selectBlogJoinedWithPostsAndAuthor"</span>, <span class="number">1</span>);</span><br><span class="line">Blog blog4 = session2.selectOne(<span class="string">"org.apache.ibatis.domain.blog.mappers.NestedBlogMapper.selectBlogJoinedWithPostsAndAuthor"</span>, <span class="number">1</span>);</span><br><span class="line">assertEquals(<span class="string">"new title"</span>, blog4.getTitle());<span class="comment">//失败 false</span></span><br><span class="line">assertEquals(<span class="string">"new title"</span>, blog3.getTitle());<span class="comment">//成功 true</span></span><br></pre></td></tr></table></figure><p>上面代码实际上会测试失败，因为产生了脏读。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码分析&quot;&gt;&lt;a href=&quot;#源码分析&quot; class=&quot;headerlink&quot; title=&quot;源码分析&quot;&gt;&lt;/a&gt;源码分析&lt;/h3&gt;&lt;p&gt;mybatis的一级缓存是session级别默认开启的，如果使用不当不了解其原理会造成一些隐患。&lt;br&gt;session在执行
      
    
    </summary>
    
    
      <category term="mybatis" scheme="https://mxzenf123.github.io/index.html/categories/mybatis/"/>
    
    
      <category term="mybatis缓存" scheme="https://mxzenf123.github.io/index.html/tags/mybatis%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>为什么阿里巴巴禁止在foreach循环里进行元素的remove/add操作</title>
    <link href="https://mxzenf123.github.io/index.html/2019/11/10/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E7%A6%81%E6%AD%A2%E5%9C%A8foreach%E5%BE%AA%E7%8E%AF%E9%87%8C%E8%BF%9B%E8%A1%8C%E5%85%83%E7%B4%A0%E7%9A%84removeadd%E6%93%8D%E4%BD%9C/"/>
    <id>https://mxzenf123.github.io/index.html/2019/11/10/为什么阿里巴巴禁止在foreach循环里进行元素的removeadd操作/</id>
    <published>2019-11-10T06:21:11.253Z</published>
    <updated>2019-11-10T08:03:58.689Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是fail-fast机制"><a href="#什么是fail-fast机制" class="headerlink" title="什么是fail-fast机制"></a>什么是fail-fast机制</h3><p>在wiki上关于fast-fail描述原文</p><blockquote><p>In systems design, a fail-fast system is one which immediately reports at its interface any condition that is likely to indicate a failure. Fail-fast systems are usually designed to stop normal operation rather than attempt to continue a possibly flawed process. Such designs often check the system’s state at several points in an operation, so any failures can be detected early. The responsibility of a fail-fast module is detecting errors, then letting the next-highest level of the system handle them.</p></blockquote><p>大致意思，在做系统设计的时候，fail-fast能够快速报告故障。fail-fast设计用于停止正常的操作，而不是让潜在错误的程序继续运行。该设计在每一次操作上都检查系统状态，能够提前检测任何故障。fail-fast能够检测错误，并且把错误交给更高一级进行处理。</p><p>一个简单的fail-fast例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> divisor, <span class="keyword">int</span> dividend)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (dividend == <span class="number">0</span>)&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"除数不能为0"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> divisor / dividend;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>fail-fast不要被这个专业术语所唬住，实际上很简单。就是对代码可能出现的一些错误提前预判罢了</p><h3 id="foreach语法糖"><a href="#foreach语法糖" class="headerlink" title="foreach语法糖"></a>foreach语法糖</h3><p>在java较早的时候对于List集合循环我们大多使用这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = list.size()-<span class="number">1</span>;i &gt;= <span class="number">0</span> ;i--)&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java给我们提供了一个foreach语法糖便利的来对集合进行遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个语法糖原理实际上是使用了List中自带的Iterator实现。但是这个留下了一个巨坑，就是在遍历的时候如果list.remove(o)方法会抛出java.util.ConcurrentModificationException异常。明明没有多线程操作啊，怎么会有这个异常，让人一脸懵逼。</p><h3 id="ArrayList集合fail-fast保护实现"><a href="#ArrayList集合fail-fast保护实现" class="headerlink" title="ArrayList集合fail-fast保护实现"></a>ArrayList集合fail-fast保护实现</h3><p>1，由于ArrayList不是线程安全的，在每次对集合进行操作的时候会调用一个这样的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>modCount是ArrayList的成员变量代表对集合操作次数；expectedModCount理论上是和modCount一样的</p><p>2，在使用Iterator迭代集合的时候，如果调用的ArrayList的remove方法，会有个这样的操作modCount++，这个时候checkForComodification检查失败所以抛出了ConcurrentModificationException异常</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是fail-fast机制&quot;&gt;&lt;a href=&quot;#什么是fail-fast机制&quot; class=&quot;headerlink&quot; title=&quot;什么是fail-fast机制&quot;&gt;&lt;/a&gt;什么是fail-fast机制&lt;/h3&gt;&lt;p&gt;在wiki上关于fast-fail描述原文&lt;
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://mxzenf123.github.io/index.html/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="fail-fast机制" scheme="https://mxzenf123.github.io/index.html/tags/fail-fast%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>java自动拆装箱问题总结</title>
    <link href="https://mxzenf123.github.io/index.html/2019/11/03/java%E8%87%AA%E5%8A%A8%E6%8B%86%E8%A3%85%E7%AE%B1%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>https://mxzenf123.github.io/index.html/2019/11/03/java自动拆装箱问题总结/</id>
    <published>2019-11-03T03:35:43.214Z</published>
    <updated>2019-11-03T03:43:41.013Z</updated>
    
    <content type="html"><![CDATA[<p>java自动拆装箱自jdk1.5以后新增功能。目的是为了解决基础<br>数据类型和对象操作不便利。比如集合List只能操作对象，而<br>无法对基本数据类型进行add，remove等一系列操作。对自动拆<br>装箱学习过程中，产生了一系列疑问，总结如下</p><h3 id="什么是基础数据类型，什么是包装类"><a href="#什么是基础数据类型，什么是包装类" class="headerlink" title="什么是基础数据类型，什么是包装类"></a>什么是基础数据类型，什么是包装类</h3><h3 id="jdk如何实现自动拆装箱"><a href="#jdk如何实现自动拆装箱" class="headerlink" title="jdk如何实现自动拆装箱"></a>jdk如何实现自动拆装箱</h3><h3 id="自动拆装箱优点和缺点"><a href="#自动拆装箱优点和缺点" class="headerlink" title="自动拆装箱优点和缺点"></a>自动拆装箱优点和缺点</h3><h3 id="自动拆装箱什么时候不自动进行"><a href="#自动拆装箱什么时候不自动进行" class="headerlink" title="自动拆装箱什么时候不自动进行"></a>自动拆装箱什么时候不自动进行</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;java自动拆装箱自jdk1.5以后新增功能。目的是为了解决基础&lt;br&gt;数据类型和对象操作不便利。比如集合List只能操作对象，而&lt;br&gt;无法对基本数据类型进行add，remove等一系列操作。对自动拆&lt;br&gt;装箱学习过程中，产生了一系列疑问，总结如下&lt;/p&gt;&lt;h3 id=
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://mxzenf123.github.io/index.html/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java自动拆装箱" scheme="https://mxzenf123.github.io/index.html/tags/java%E8%87%AA%E5%8A%A8%E6%8B%86%E8%A3%85%E7%AE%B1/"/>
    
  </entry>
  
  <entry>
    <title>Integer的缓存机制</title>
    <link href="https://mxzenf123.github.io/index.html/2019/11/02/Integer%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E7%BC%93%E5%AD%98/"/>
    <id>https://mxzenf123.github.io/index.html/2019/11/02/Integer自动装箱缓存/</id>
    <published>2019-11-02T09:03:40.988Z</published>
    <updated>2019-11-02T09:10:02.833Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaIntegerCache</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... strings)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Integer integer1 = <span class="number">3</span>;</span><br><span class="line">        Integer integer2 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (integer1 == integer2)</span><br><span class="line">            System.out.println(<span class="string">"integer1 == integer2"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">"integer1 != integer2"</span>);</span><br><span class="line"></span><br><span class="line">        Integer integer3 = <span class="number">300</span>;</span><br><span class="line">        Integer integer4 = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (integer3 == integer4)</span><br><span class="line">            System.out.println(<span class="string">"integer3 == integer4"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">"integer3 != integer4"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于Integer是对象，两个对象比较，我们普遍的认为上面的两个结果都是false<br>然而结果却会让你大跌眼镜。</p><p>上面这段代码真正的输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">integer1 == integer2</span><br><span class="line">integer3 != integer4</span><br></pre></td></tr></table></figure><p>原因就在于java5.0以后对于基本类型自动装箱的在范围-127到128之间会进行自动<br>缓存以提升程序性能</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://mxzenf123.github.io/index.html/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java自动装箱" scheme="https://mxzenf123.github.io/index.html/tags/java%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1/"/>
    
      <category term="java缓存" scheme="https://mxzenf123.github.io/index.html/tags/java%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>mybatis动态sql之组合模式</title>
    <link href="https://mxzenf123.github.io/index.html/2019/11/02/mybatis%E5%8A%A8%E6%80%81sql%E5%AE%9E%E7%8E%B0%E4%B9%8B%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>https://mxzenf123.github.io/index.html/2019/11/02/mybatis动态sql实现之组合模式/</id>
    <published>2019-11-02T07:19:56.648Z</published>
    <updated>2019-11-02T08:33:48.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组合设计模式"><a href="#组合设计模式" class="headerlink" title="组合设计模式"></a>组合设计模式</h2><p>组合设计模式是一种整体与部分的树形层次关系结构。组合对象中各个对象具有<br>相同的行为模式，这样就能处理简单对象一样处理复杂对象。复杂对象的底层细节<br>将会被屏蔽掉，与客户端解耦，最重要的是和简单对象一样实现了同一个接口</p><h2 id="mybatis动态sql"><a href="#mybatis动态sql" class="headerlink" title="mybatis动态sql"></a>mybatis动态sql</h2><h3 id="实现同一个接口"><a href="#实现同一个接口" class="headerlink" title="实现同一个接口"></a>实现同一个接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SqlNode</span> </span>&#123;</span><br><span class="line">  <span class="comment">//共同的行为</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(DynamicContext context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂对象"><a href="#复杂对象" class="headerlink" title="复杂对象"></a>复杂对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//混合sqlnode节点，组合不同类型的sqlnode</span></span><br><span class="line"> <span class="comment">//其他node有：trim,set,where,if,otherwise</span></span><br><span class="line"> <span class="comment">//choose</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MixedSqlNode</span> <span class="keyword">implements</span> <span class="title">SqlNode</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> List&lt;SqlNode&gt; contents;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MixedSqlNode</span><span class="params">(List&lt;SqlNode&gt; contents)</span></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.contents = contents;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(DynamicContext context)</span></span>&#123;</span><br><span class="line">  contents.forEach(node -&gt; node.apply(context));</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="简单对象"><a href="#简单对象" class="headerlink" title="简单对象"></a>简单对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//if sqlnode实现了接口sqlnode的apply方法，</span></span><br><span class="line"><span class="comment">//定义了自己的行为只有当test表达式为真的时候</span></span><br><span class="line"><span class="comment">//才会将节点内容增加到动态上下文的sql拼接中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfSqlNode</span> <span class="keyword">implements</span> <span class="title">SqlNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ExpressionEvaluator evaluator;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String test;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> SqlNode contents;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">IfSqlNode</span><span class="params">(SqlNode contents, String test)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.test = test;</span><br><span class="line">    <span class="keyword">this</span>.contents = contents;</span><br><span class="line">    <span class="keyword">this</span>.evaluator = <span class="keyword">new</span> ExpressionEvaluator();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(DynamicContext context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (evaluator.evaluateBoolean(test, context.getBindings())) &#123;</span><br><span class="line">      contents.apply(context);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mybatis一组复杂sql在xml文件中的配置"><a href="#mybatis一组复杂sql在xml文件中的配置" class="headerlink" title="mybatis一组复杂sql在xml文件中的配置"></a>mybatis一组复杂sql在xml文件中的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  trim节点作为根节点，下面有三个if子节点，在Mybatis中组织成</span></span><br><span class="line"><span class="comment">  一个根节点MixedNode节点下两个trim节点和where节点;trim节点</span></span><br><span class="line"><span class="comment">  下一个MixedNode节点，由三个if节点组成;where节点实际上的trim</span></span><br><span class="line"><span class="comment">  节点的另一种实现，原理一样</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"org.format.dynamicproxy.mybatis.bean.User"</span>&gt;</span></span><br><span class="line">   UPDATE users</span><br><span class="line">   <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"SET"</span> <span class="attr">prefixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null and name != ''"</span>&gt;</span></span><br><span class="line">           name = #&#123;name&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age != null and age != ''"</span>&gt;</span></span><br><span class="line">           , age = #&#123;age&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"birthday != null and birthday != ''"</span>&gt;</span></span><br><span class="line">           , birthday = #&#123;birthday&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">where</span>&gt;</span> 1=1</span><br><span class="line">     <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id != null"</span>&gt;</span></span><br><span class="line">   and id = $&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>组合模式对于具有层次关系多个对象能够很好的表达，但是比较抽象<br>不容易掌控。提高了软件设计困难同时屏蔽了对象复杂性，客户端使用<br>变得简单</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;组合设计模式&quot;&gt;&lt;a href=&quot;#组合设计模式&quot; class=&quot;headerlink&quot; title=&quot;组合设计模式&quot;&gt;&lt;/a&gt;组合设计模式&lt;/h2&gt;&lt;p&gt;组合设计模式是一种整体与部分的树形层次关系结构。组合对象中各个对象具有&lt;br&gt;相同的行为模式，这样就能处理简
      
    
    </summary>
    
    
      <category term="框架工具" scheme="https://mxzenf123.github.io/index.html/categories/%E6%A1%86%E6%9E%B6%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="mybatis动态sql" scheme="https://mxzenf123.github.io/index.html/tags/mybatis%E5%8A%A8%E6%80%81sql/"/>
    
      <category term="组合设计模式" scheme="https://mxzenf123.github.io/index.html/tags/%E7%BB%84%E5%90%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>spring IoC和容器问题整理</title>
    <link href="https://mxzenf123.github.io/index.html/2019/10/27/springioc%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <id>https://mxzenf123.github.io/index.html/2019/10/27/springioc问题整理/</id>
    <published>2019-10-27T06:44:07.570Z</published>
    <updated>2019-10-27T07:41:12.816Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>什么是依赖注入以及有什么好处?</p></li><li><p>什么是接口，在java中使用的好处</p><ul><li>spring bean中为什么推荐使用接口</li></ul></li><li><p>application-context代表什么？</p></li><li><p>你怎么创建一个ApplicationContext实例？</p></li><li><p>描述bean在ApplicationoContext的声明周期</p></li><li><p>最好的关闭ApplicationContext的方式是什么？SpringBoot为我们做了这个吗？</p></li><li><p>能够描述一下下面的问题</p><ul><li>使用java进行依赖注入</li><li>使用注解进行依赖注入</li><li>组件、模块扫描</li><li>bean的scope</li><li>bean是懒加载还是预实例化？你怎么控制这种行为？</li></ul></li><li><p>什么是属性源文件？你怎么使用@PropertySource</p></li><li><p>什么是BeanFactoryPostProcessor，有什么用？它什么时候被调用？</p><ul><li>ProperySourcesPlaceholderConfigurer被用于什么地方？</li></ul></li><li><p>什么是组件扫描？</p></li><li><p>@Autowired注解关于属性、构造器和方法做了什么？</p></li><li><p>如果要向私有属性注入？怎么做到？</p></li><li><p>@Qualifier对@Autowired做了什么补充？</p></li><li><p>什么是对象代理？spring两种创建代理对象的区别？</p><ul><li>代理对象的限制？</li><li>代理对象的功能和弊端？</li></ul></li><li><p>@Bean注解有什么用</p></li><li><p>@Bean注解的Bean的默认id是什么？你如果改变？</p></li><li><p>为什么不允许在final类上使用@Configration注解</p><ul><li>@Configration支持单例bean吗</li><li>为什么@Bean注解的类的方法也不能是final的</li></ul></li><li><p>什么时候配置profile？在哪些场景会有用</p></li><li><p>@Bean和@Profile能够同时使用吗？</p></li><li><p>@Component和@Profile能够一起使用吗？</p></li><li><p>你能够列举多少种profiles？</p></li><li><p>怎么注入集合和k-v类型的数据到bean中？</p></li><li><p>什么是SpringEL表达式？</p></li><li><p>spring enviroment抽象是什么？</p></li><li><p>$和#有什么区别？</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;&lt;li&gt;&lt;p&gt;什么是依赖注入以及有什么好处?&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;什么是接口，在java中使用的好处&lt;/p&gt;&lt;ul&gt;&lt;li&gt;spring bean中为什么推荐使用接口&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;application-context代表什么？&lt;/
      
    
    </summary>
    
    
      <category term="spring" scheme="https://mxzenf123.github.io/index.html/categories/spring/"/>
    
    
      <category term="spring IoC" scheme="https://mxzenf123.github.io/index.html/tags/spring-IoC/"/>
    
      <category term="spring容器" scheme="https://mxzenf123.github.io/index.html/tags/spring%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>intellij常用快捷键</title>
    <link href="https://mxzenf123.github.io/index.html/2019/10/13/intellij%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://mxzenf123.github.io/index.html/2019/10/13/intellij常用快捷键/</id>
    <published>2019-10-13T07:16:49.815Z</published>
    <updated>2019-10-13T07:19:52.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h2><p>Ctrl+X，删除行</p><p>Ctrl+D，复制行</p><p>Ctrl+Alt+O，优化导入的类和包</p><p>Ctrl+Alt+L，格式化代码</p><p>Ctrl+Shift+F，全局查找，类似Eclipse中的Ctrl+H查找</p><p>Ctrl+H，显示类结构图（类的继承层次）</p><p>Ctrl+F12，可以显示当前文件的结构（structure包括属性和方法）</p><p>Alt+Q，可以看到当前方法的声明</p><p>Ctrl+Q，显示注释文档</p><p>Ctrl+P，可以显示参数信息</p><p>Ctrl+N，可以快速打开类</p><p>Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）</p><p>Ctrl+Alt+B，跳转到方法实现处</p><p>Alt+左箭头，跳转到上次编辑的地方</p><p>Shift+F6，重命名</p><p>Alt+Shift+Up/Down，上/下移一行</p><p>Ctrl+Shift+U，大小写转化</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>F8，步过<br>F7，步入<br>Shift+F7，智能步入<br>Shift+F8，步出<br>Alt+Shift+F8，强制步过<br>Alt+Shift+F7，强制步入<br>Alt+F9，运行至光标处<br>Ctrl+Alt+F9，强制运行至光标处<br>F9，恢复程序</p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>Ctrl+F，查找<br>Ctrl+R，替换<br>Alt+F7，查找用法<br>Ctrl+Alt+F7，显示用法<br>Ctrl+F7，在文件中查找用法r</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常规&quot;&gt;&lt;a href=&quot;#常规&quot; class=&quot;headerlink&quot; title=&quot;常规&quot;&gt;&lt;/a&gt;常规&lt;/h2&gt;&lt;p&gt;Ctrl+X，删除行&lt;/p&gt;&lt;p&gt;Ctrl+D，复制行&lt;/p&gt;&lt;p&gt;Ctrl+Alt+O，优化导入的类和包&lt;/p&gt;&lt;p&gt;Ctrl+Alt+L
      
    
    </summary>
    
    
      <category term="奇淫技巧" scheme="https://mxzenf123.github.io/index.html/categories/%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="intellij快捷键" scheme="https://mxzenf123.github.io/index.html/tags/intellij%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>apache BeanUtils入门</title>
    <link href="https://mxzenf123.github.io/index.html/2019/10/13/apache_beanutils%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    <id>https://mxzenf123.github.io/index.html/2019/10/13/apache_beanutils使用入门/</id>
    <published>2019-10-13T05:38:23.494Z</published>
    <updated>2019-10-13T06:46:39.468Z</updated>
    
    <content type="html"><![CDATA[<p>apache项目地址<a href="http://commons.apache.org/proper/commons-beanutils" target="_blank" rel="noopener">site</a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在我们使用java开发过程中，对于操作类的属性一般通过get或者set两个方法，类似于Object.get()/set()。但是有的时候我们可能不能够直接调用这两个方法获取类的属性，也许第一反应是用reflection，这样会自己写太多和业务无关的代码。apache commons包中BeanUtils能够帮助我们解决这个问题。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="引入apache-commons-beanutils包"><a href="#引入apache-commons-beanutils包" class="headerlink" title="引入apache commons-beanutils包"></a>引入apache commons-beanutils包</h3><h3 id="新建类Empolyee"><a href="#新建类Empolyee" class="headerlink" title="新建类Empolyee"></a>新建类Empolyee</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String firstName;</span><br><span class="line">  <span class="keyword">public</span> String lastName;</span><br><span class="line">  <span class="keyword">public</span> String[] tells;</span><br><span class="line">  <span class="keyword">public</span> Map address;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span></span>&#123;</span><br><span class="line">    tells = <span class="keyword">new</span> String[<span class="number">10</span>];</span><br><span class="line">    address = <span class="keyword">new</span> HashMap();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(String firstName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lastName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String[] getTells() &#123;</span><br><span class="line">    <span class="keyword">return</span> tells;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTells</span><span class="params">(String[] tells)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.tells = tells;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Map <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> address;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Map address)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.address = address;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>这篇文章我们主要介绍该工具包中PropertyUtils入门使用</p><h3 id="简单属性"><a href="#简单属性" class="headerlink" title="简单属性"></a>简单属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">PropertyUtils.setSimpleProperty(employee, <span class="string">"firstName"</span>, <span class="string">"欣"</span>);</span><br><span class="line">PropertyUtils.setSimpleProperty(employee, <span class="string">"lastName"</span>, <span class="string">"杨"</span>);</span><br></pre></td></tr></table></figure><h3 id="带索引的属性"><a href="#带索引的属性" class="headerlink" title="带索引的属性"></a>带索引的属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">PropertyUtils.setIndexedProperty(employee, <span class="string">"tells[0]"</span>, <span class="string">"110"</span>);</span><br><span class="line">PropertyUtils.setIndexedProperty(employee, <span class="string">"tells[1]"</span>, <span class="string">"120"</span>);</span><br></pre></td></tr></table></figure><h3 id="key-value属性"><a href="#key-value属性" class="headerlink" title="key-value属性"></a>key-value属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">PropertyUtils.setMappedProperty(employee, <span class="string">"address(province)"</span>, <span class="string">"四川省"</span>);</span><br><span class="line">PropertyUtils.setMappedProperty(employee, <span class="string">"address(city)"</span>, <span class="string">"成都"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;apache项目地址&lt;a href=&quot;http://commons.apache.org/proper/commons-beanutils&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;site&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背
      
    
    </summary>
    
    
      <category term="框架工具" scheme="https://mxzenf123.github.io/index.html/categories/%E6%A1%86%E6%9E%B6%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="apache commons" scheme="https://mxzenf123.github.io/index.html/tags/apache-commons/"/>
    
      <category term="java" scheme="https://mxzenf123.github.io/index.html/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo搭建个人博客</title>
    <link href="https://mxzenf123.github.io/index.html/2019/09/28/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/"/>
    <id>https://mxzenf123.github.io/index.html/2019/09/28/搭建hexo博客/</id>
    <published>2019-09-28T03:23:49.980Z</published>
    <updated>2019-10-05T13:26:29.070Z</updated>
    
    <content type="html"><![CDATA[<p>Quick start参考官网<a href="https://hexo.io/docs/" target="_blank" rel="noopener">文档</a></p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建博客文件夹"><a href="#创建博客文件夹" class="headerlink" title="创建博客文件夹"></a>创建博客文件夹</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>更多: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">创建</a></p><h3 id="启动本地服务"><a href="#启动本地服务" class="headerlink" title="启动本地服务"></a>启动本地服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>更多: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">服务器</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>更多: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">生成静态文件</a></p><h3 id="发布到远程服务器"><a href="#发布到远程服务器" class="headerlink" title="发布到远程服务器"></a>发布到远程服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>更多: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">发布</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Quick start参考官网&lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文档&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&quot;快速开始&quot;&gt;&lt;a href=&quot;#快速开始&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="奇淫技巧" scheme="https://mxzenf123.github.io/index.html/categories/%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="hexo" scheme="https://mxzenf123.github.io/index.html/tags/hexo/"/>
    
  </entry>
  
</feed>
